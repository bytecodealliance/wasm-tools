(module
  (type (;0;) (func))
  (func (;0;) (type 0)
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
        end
        v128.not
      end
      drop
    end
  )
  (func (;1;) (type 0)
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
        end
        v128.and
      end
      drop
    end
  )
  (func (;2;) (type 0)
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
        end
        v128.or
      end
      drop
    end
  )
  (func (;3;) (type 0)
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
        end
        v128.xor
      end
      drop
    end
  )
  (func (;4;) (type 0)
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
        end
        block (result v128) ;; label = @3
          i32.const 2
          v128.load
        end
        v128.bitselect
      end
      drop
    end
  )
  (func (;5;) (type 0)
    block ;; label = @1
      block (result v128) ;; label = @2
        block (result v128) ;; label = @3
          i32.const 0
          v128.load
        end
        block (result v128) ;; label = @3
          i32.const 1
          v128.load
        end
        v128.andnot
      end
      drop
    end
  )
  (func (;6;) (type 0)
    i32.const 0
    v128.load
    v128.not
    v128.not
    v128.not
    drop
  )
  (func (;7;) (type 0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.and
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.and
    v128.and
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.and
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.and
    v128.and
    v128.and
    drop
  )
  (func (;8;) (type 0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.or
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.or
    v128.or
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.or
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.or
    v128.or
    v128.or
    drop
  )
  (func (;9;) (type 0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    v128.xor
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.xor
    v128.xor
    v128.xor
    drop
  )
  (func (;10;) (type 0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    v128.bitselect
    v128.bitselect
    drop
  )
  (func (;11;) (type 0)
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    v128.andnot
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    v128.andnot
    v128.andnot
    drop
  )
  (func (;12;) (type 0)
    i32.const 0
    v128.load
    v128.not
    i32.const 1
    v128.load
    v128.not
    v128.and
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    i32.const 2
    v128.load
    v128.bitselect
    i32.const 0
    v128.load
    i32.const 1
    v128.load
    v128.andnot
    v128.xor
    v128.or
    drop
  )
  (memory (;0;) 1)
  (export "v128.not-in-block" (func 0))
  (export "v128.and-in-block" (func 1))
  (export "v128.or-in-block" (func 2))
  (export "v128.xor-in-block" (func 3))
  (export "v128.bitselect-in-block" (func 4))
  (export "v128.andnot-in-block" (func 5))
  (export "nested-v128.not" (func 6))
  (export "nested-v128.and" (func 7))
  (export "nested-v128.or" (func 8))
  (export "nested-v128.xor" (func 9))
  (export "nested-v128.bitselect" (func 10))
  (export "nested-v128.andnot" (func 11))
  (export "as-param" (func 12))
)