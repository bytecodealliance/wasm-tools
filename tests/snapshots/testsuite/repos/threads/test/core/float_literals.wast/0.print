(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (result i64)))
  (type (;2;) (func (result f32)))
  (type (;3;) (func (result f64)))
  (func (;0;) (type 0) (result i32)
    f32.const nan (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;1;) (type 0) (result i32)
    f32.const nan (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;2;) (type 0) (result i32)
    f32.const -nan (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;3;) (type 0) (result i32)
    f32.const nan (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;4;) (type 0) (result i32)
    f32.const nan:0x200000 (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;5;) (type 0) (result i32)
    f32.const -nan:0x7fffff (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;6;) (type 0) (result i32)
    f32.const nan:0x12345 (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;7;) (type 0) (result i32)
    f32.const nan:0x304050 (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;8;) (type 0) (result i32)
    f32.const -nan:0x2abcde (;=NaN;)
    i32.reinterpret_f32
  )
  (func (;9;) (type 0) (result i32)
    f32.const inf (;=inf;)
    i32.reinterpret_f32
  )
  (func (;10;) (type 0) (result i32)
    f32.const inf (;=inf;)
    i32.reinterpret_f32
  )
  (func (;11;) (type 0) (result i32)
    f32.const -inf (;=-inf;)
    i32.reinterpret_f32
  )
  (func (;12;) (type 0) (result i32)
    f32.const 0x0p+0 (;=0;)
    i32.reinterpret_f32
  )
  (func (;13;) (type 0) (result i32)
    f32.const 0x0p+0 (;=0;)
    i32.reinterpret_f32
  )
  (func (;14;) (type 0) (result i32)
    f32.const -0x0p+0 (;=-0;)
    i32.reinterpret_f32
  )
  (func (;15;) (type 0) (result i32)
    f32.const 0x1.921fb6p+2 (;=6.2831855;)
    i32.reinterpret_f32
  )
  (func (;16;) (type 0) (result i32)
    f32.const 0x1.p-149 (;=0.000000000000000000000000000000000000000000001;)
    i32.reinterpret_f32
  )
  (func (;17;) (type 0) (result i32)
    f32.const 0x1p-126 (;=0.000000000000000000000000000000000000011754944;)
    i32.reinterpret_f32
  )
  (func (;18;) (type 0) (result i32)
    f32.const 0x1.fffffep+127 (;=340282350000000000000000000000000000000;)
    i32.reinterpret_f32
  )
  (func (;19;) (type 0) (result i32)
    f32.const 0x1.fffffcp-127 (;=0.000000000000000000000000000000000000011754942;)
    i32.reinterpret_f32
  )
  (func (;20;) (type 0) (result i32)
    f32.const 0x1p+10 (;=1024;)
    i32.reinterpret_f32
  )
  (func (;21;) (type 0) (result i32)
    f32.const 0x0p+0 (;=0;)
    i32.reinterpret_f32
  )
  (func (;22;) (type 0) (result i32)
    f32.const 0x0p+0 (;=0;)
    i32.reinterpret_f32
  )
  (func (;23;) (type 0) (result i32)
    f32.const -0x0p+0 (;=-0;)
    i32.reinterpret_f32
  )
  (func (;24;) (type 0) (result i32)
    f32.const 0x1.921fb6p+2 (;=6.2831855;)
    i32.reinterpret_f32
  )
  (func (;25;) (type 0) (result i32)
    f32.const 0x1.p-149 (;=0.000000000000000000000000000000000000000000001;)
    i32.reinterpret_f32
  )
  (func (;26;) (type 0) (result i32)
    f32.const 0x1p-126 (;=0.000000000000000000000000000000000000011754944;)
    i32.reinterpret_f32
  )
  (func (;27;) (type 0) (result i32)
    f32.const 0x1.fffffcp-127 (;=0.000000000000000000000000000000000000011754942;)
    i32.reinterpret_f32
  )
  (func (;28;) (type 0) (result i32)
    f32.const 0x1.fffffep+127 (;=340282350000000000000000000000000000000;)
    i32.reinterpret_f32
  )
  (func (;29;) (type 0) (result i32)
    f32.const 0x1.2a05f2p+33 (;=10000000000;)
    i32.reinterpret_f32
  )
  (func (;30;) (type 0) (result i32)
    f32.const 0x1.000002p+0 (;=1.0000001;)
    i32.reinterpret_f32
  )
  (func (;31;) (type 1) (result i64)
    f64.const nan (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;32;) (type 1) (result i64)
    f64.const nan (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;33;) (type 1) (result i64)
    f64.const -nan (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;34;) (type 1) (result i64)
    f64.const nan (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;35;) (type 1) (result i64)
    f64.const nan:0x4000000000000 (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;36;) (type 1) (result i64)
    f64.const -nan:0xfffffffffffff (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;37;) (type 1) (result i64)
    f64.const nan:0x123456789abc (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;38;) (type 1) (result i64)
    f64.const nan:0x3040506070809 (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;39;) (type 1) (result i64)
    f64.const -nan:0x2abcdef012345 (;=NaN;)
    i64.reinterpret_f64
  )
  (func (;40;) (type 1) (result i64)
    f64.const inf (;=inf;)
    i64.reinterpret_f64
  )
  (func (;41;) (type 1) (result i64)
    f64.const inf (;=inf;)
    i64.reinterpret_f64
  )
  (func (;42;) (type 1) (result i64)
    f64.const -inf (;=-inf;)
    i64.reinterpret_f64
  )
  (func (;43;) (type 1) (result i64)
    f64.const 0x0p+0 (;=0;)
    i64.reinterpret_f64
  )
  (func (;44;) (type 1) (result i64)
    f64.const 0x0p+0 (;=0;)
    i64.reinterpret_f64
  )
  (func (;45;) (type 1) (result i64)
    f64.const -0x0p+0 (;=-0;)
    i64.reinterpret_f64
  )
  (func (;46;) (type 1) (result i64)
    f64.const 0x1.921fb54442d18p+2 (;=6.283185307179586;)
    i64.reinterpret_f64
  )
  (func (;47;) (type 1) (result i64)
    f64.const 0x1.p-1074 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005;)
    i64.reinterpret_f64
  )
  (func (;48;) (type 1) (result i64)
    f64.const 0x1p-1022 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014;)
    i64.reinterpret_f64
  )
  (func (;49;) (type 1) (result i64)
    f64.const 0x1.ffffffffffffep-1023 (;=0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201;)
    i64.reinterpret_f64
  )
  (func (;50;) (type 1) (result i64)
    f64.const 0x1.fffffffffffffp+1023 (;=179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;)
    i64.reinterpret_f64
  )
  (func (;51;) (type 1) (result i64)
    f64.const 0x1p+100 (;=1267650600228229400000000000000;)
    i64.reinterpret_f64
  )
  (func (;52;) (type 1) (result i64)
    f64.const 0x0p+0 (;=0;)
    i64.reinterpret_f64
  )
  (func (;53;) (type 1) (result i64)
    f64.const 0x0p+0 (;=0;)
    i64.reinterpret_f64
  )
  (func (;54;) (type 1) (result i64)
    f64.const -0x0p+0 (;=-0;)
    i64.reinterpret_f64
  )
  (func (;55;) (type 1) (result i64)
    f64.const 0x1.921fb54442d18p+2 (;=6.283185307179586;)
    i64.reinterpret_f64
  )
  (func (;56;) (type 1) (result i64)
    f64.const 0x1.p-1074 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005;)
    i64.reinterpret_f64
  )
  (func (;57;) (type 1) (result i64)
    f64.const 0x1p-1022 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014;)
    i64.reinterpret_f64
  )
  (func (;58;) (type 1) (result i64)
    f64.const 0x1.ffffffffffffep-1023 (;=0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002225073858507201;)
    i64.reinterpret_f64
  )
  (func (;59;) (type 1) (result i64)
    f64.const 0x1.fffffffffffffp+1023 (;=179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;)
    i64.reinterpret_f64
  )
  (func (;60;) (type 1) (result i64)
    f64.const 0x1.249ad2594c37dp+332 (;=10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;)
    i64.reinterpret_f64
  )
  (func (;61;) (type 1) (result i64)
    f64.const 0x1.000001ff19e24p+0 (;=1.000000119;)
    i64.reinterpret_f64
  )
  (func (;62;) (type 2) (result f32)
    f32.const 0x1.e848p+19 (;=1000000;)
  )
  (func (;63;) (type 2) (result f32)
    f32.const 0x1.f4p+9 (;=1000;)
  )
  (func (;64;) (type 2) (result f32)
    f32.const 0x1.f5922p+9 (;=1003.1416;)
  )
  (func (;65;) (type 2) (result f32)
    f32.const 0x1.c2332cp+49 (;=990000000000000;)
  )
  (func (;66;) (type 2) (result f32)
    f32.const 0x1.3b5ce8p+93 (;=12200012000000000000000000000;)
  )
  (func (;67;) (type 2) (result f32)
    f32.const 0x1.41e014p+27 (;=168755360;)
  )
  (func (;68;) (type 2) (result f32)
    f32.const 0x1.aa0fp+16 (;=109071;)
  )
  (func (;69;) (type 2) (result f32)
    f32.const 0x1.41ffe2p+15 (;=41215.94;)
  )
  (func (;70;) (type 2) (result f32)
    f32.const 0x1.ep+20 (;=1966080;)
  )
  (func (;71;) (type 2) (result f32)
    f32.const 0x1.57805p+44 (;=23605224000000;)
  )
  (func (;72;) (type 3) (result f64)
    f64.const 0x1.e848p+19 (;=1000000;)
  )
  (func (;73;) (type 3) (result f64)
    f64.const 0x1.f4p+9 (;=1000;)
  )
  (func (;74;) (type 3) (result f64)
    f64.const 0x1.f5921fafc8bp+9 (;=1003.141592;)
  )
  (func (;75;) (type 3) (result f64)
    f64.const 0x1.05c735bb7cc45p-402 (;=0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099;)
  )
  (func (;76;) (type 3) (result f64)
    f64.const 0x1.3b5ce725bde9cp+93 (;=12200011354000000000000000000;)
  )
  (func (;77;) (type 3) (result f64)
    f64.const 0x1.5e01e00013332p+51 (;=3078696982321561;)
  )
  (func (;78;) (type 3) (result f64)
    f64.const 0x1.aa0fp+16 (;=109071;)
  )
  (func (;79;) (type 3) (result f64)
    f64.const 0x1.41ffe2834b34p+15 (;=41215.94240794191;)
  )
  (func (;80;) (type 3) (result f64)
    f64.const 0x1.ep+20 (;=1966080;)
  )
  (func (;81;) (type 3) (result f64)
    f64.const 0x1.578050f9f7p+44 (;=23605225168752;)
  )
  (export "f32.nan" (func 0))
  (export "f32.positive_nan" (func 1))
  (export "f32.negative_nan" (func 2))
  (export "f32.plain_nan" (func 3))
  (export "f32.informally_known_as_plain_snan" (func 4))
  (export "f32.all_ones_nan" (func 5))
  (export "f32.misc_nan" (func 6))
  (export "f32.misc_positive_nan" (func 7))
  (export "f32.misc_negative_nan" (func 8))
  (export "f32.infinity" (func 9))
  (export "f32.positive_infinity" (func 10))
  (export "f32.negative_infinity" (func 11))
  (export "f32.zero" (func 12))
  (export "f32.positive_zero" (func 13))
  (export "f32.negative_zero" (func 14))
  (export "f32.misc" (func 15))
  (export "f32.min_positive" (func 16))
  (export "f32.min_normal" (func 17))
  (export "f32.max_finite" (func 18))
  (export "f32.max_subnormal" (func 19))
  (export "f32.trailing_dot" (func 20))
  (export "f32_dec.zero" (func 21))
  (export "f32_dec.positive_zero" (func 22))
  (export "f32_dec.negative_zero" (func 23))
  (export "f32_dec.misc" (func 24))
  (export "f32_dec.min_positive" (func 25))
  (export "f32_dec.min_normal" (func 26))
  (export "f32_dec.max_subnormal" (func 27))
  (export "f32_dec.max_finite" (func 28))
  (export "f32_dec.trailing_dot" (func 29))
  (export "f32_dec.root_beer_float" (func 30))
  (export "f64.nan" (func 31))
  (export "f64.positive_nan" (func 32))
  (export "f64.negative_nan" (func 33))
  (export "f64.plain_nan" (func 34))
  (export "f64.informally_known_as_plain_snan" (func 35))
  (export "f64.all_ones_nan" (func 36))
  (export "f64.misc_nan" (func 37))
  (export "f64.misc_positive_nan" (func 38))
  (export "f64.misc_negative_nan" (func 39))
  (export "f64.infinity" (func 40))
  (export "f64.positive_infinity" (func 41))
  (export "f64.negative_infinity" (func 42))
  (export "f64.zero" (func 43))
  (export "f64.positive_zero" (func 44))
  (export "f64.negative_zero" (func 45))
  (export "f64.misc" (func 46))
  (export "f64.min_positive" (func 47))
  (export "f64.min_normal" (func 48))
  (export "f64.max_subnormal" (func 49))
  (export "f64.max_finite" (func 50))
  (export "f64.trailing_dot" (func 51))
  (export "f64_dec.zero" (func 52))
  (export "f64_dec.positive_zero" (func 53))
  (export "f64_dec.negative_zero" (func 54))
  (export "f64_dec.misc" (func 55))
  (export "f64_dec.min_positive" (func 56))
  (export "f64_dec.min_normal" (func 57))
  (export "f64_dec.max_subnormal" (func 58))
  (export "f64_dec.max_finite" (func 59))
  (export "f64_dec.trailing_dot" (func 60))
  (export "f64_dec.root_beer_float" (func 61))
  (export "f32-dec-sep1" (func 62))
  (export "f32-dec-sep2" (func 63))
  (export "f32-dec-sep3" (func 64))
  (export "f32-dec-sep4" (func 65))
  (export "f32-dec-sep5" (func 66))
  (export "f32-hex-sep1" (func 67))
  (export "f32-hex-sep2" (func 68))
  (export "f32-hex-sep3" (func 69))
  (export "f32-hex-sep4" (func 70))
  (export "f32-hex-sep5" (func 71))
  (export "f64-dec-sep1" (func 72))
  (export "f64-dec-sep2" (func 73))
  (export "f64-dec-sep3" (func 74))
  (export "f64-dec-sep4" (func 75))
  (export "f64-dec-sep5" (func 76))
  (export "f64-hex-sep1" (func 77))
  (export "f64-hex-sep2" (func 78))
  (export "f64-hex-sep3" (func 79))
  (export "f64-hex-sep4" (func 80))
  (export "f64-hex-sep5" (func 81))
)