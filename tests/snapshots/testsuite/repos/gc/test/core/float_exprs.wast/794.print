(module
  (type (;0;) (func (param f32 f32) (result f32)))
  (type (;1;) (func (param f64 f64) (result f64)))
  (func (;0;) (type 0) (param $0 f32) (param $1 f32) (result f32)
    loop $label$0 ;; label = @1
      local.get $0
      local.get $0
      f32.add
      local.tee $0
      f32.const 0x1p+0 (;=1;)
      f32.add
      local.get $0
      f32.sub
      f32.const -0x1p+0 (;=-1;)
      f32.add
      f32.const 0x0p+0 (;=0;)
      f32.eq
      br_if 0 (;@1;)
    end
    loop $label$2 ;; label = @1
      local.get $0
      local.get $1
      f32.const 0x1p+0 (;=1;)
      f32.add
      local.tee $1
      f32.add
      local.get $0
      f32.sub
      local.get $1
      f32.sub
      f32.const 0x0p+0 (;=0;)
      f32.ne
      br_if 0 (;@1;)
    end
    local.get $1
  )
  (func (;1;) (type 1) (param $0 f64) (param $1 f64) (result f64)
    loop $label$0 ;; label = @1
      local.get $0
      local.get $0
      f64.add
      local.tee $0
      f64.const 0x1p+0 (;=1;)
      f64.add
      local.get $0
      f64.sub
      f64.const -0x1p+0 (;=-1;)
      f64.add
      f64.const 0x0p+0 (;=0;)
      f64.eq
      br_if 0 (;@1;)
    end
    loop $label$2 ;; label = @1
      local.get $0
      local.get $1
      f64.const 0x1p+0 (;=1;)
      f64.add
      local.tee $1
      f64.add
      local.get $0
      f64.sub
      local.get $1
      f64.sub
      f64.const 0x0p+0 (;=0;)
      f64.ne
      br_if 0 (;@1;)
    end
    local.get $1
  )
  (export "f32.compute_radix" (func 0))
  (export "f64.compute_radix" (func 1))
)