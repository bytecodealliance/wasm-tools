(module
  (type $t (;0;) (func))
  (type (;1;) (func (param funcref) (result i32)))
  (type (;2;) (func (param externref) (result i32)))
  (type (;3;) (func (param (ref null 0)) (result i32)))
  (type (;4;) (func (result i32)))
  (type (;5;) (func (param externref)))
  (type (;6;) (func (param i32) (result i32)))
  (func $dummy (;0;) (type $t))
  (func $f1 (;1;) (type 1) (param $x funcref) (result i32)
    local.get $x
    ref.is_null
  )
  (func $f2 (;2;) (type 2) (param $x externref) (result i32)
    local.get $x
    ref.is_null
  )
  (func $f3 (;3;) (type 3) (param $x (ref null 0)) (result i32)
    local.get $x
    ref.is_null
  )
  (func $f3' (;4;) (type 4) (result i32)
    ref.null 0
    call $f3
  )
  (func (;5;) (type 5) (param $r externref)
    i32.const 1
    local.get $r
    table.set $t2
  )
  (func (;6;) (type $t)
    i32.const 1
    ref.null func
    table.set $t1
    i32.const 1
    ref.null extern
    table.set $t2
    i32.const 1
    ref.null 0
    table.set $t3
  )
  (func (;7;) (type 6) (param $x i32) (result i32)
    local.get $x
    table.get $t1
    call $f1
  )
  (func (;8;) (type 6) (param $x i32) (result i32)
    local.get $x
    table.get $t2
    call $f2
  )
  (func (;9;) (type 6) (param $x i32) (result i32)
    local.get $x
    table.get $t3
    call $f3
  )
  (table $t1 (;0;) 2 funcref)
  (table $t2 (;1;) 2 externref)
  (table $t3 (;2;) 2 (ref null 0))
  (export "funcref" (func $f1))
  (export "externref" (func $f2))
  (export "ref-null" (func $f3'))
  (export "init" (func 5))
  (export "deinit" (func 6))
  (export "funcref-elem" (func 7))
  (export "externref-elem" (func 8))
  (export "ref-elem" (func 9))
  (elem (;0;) (i32.const 1) func $dummy)
  (elem (;1;) (table $t3) (i32.const 1) (ref 0) (ref.func $dummy))
)