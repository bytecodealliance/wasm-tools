(module
  (type $check (;0;) (func (param i32 i32) (result i32)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func (result i64)))
  (type (;3;) (func (result f32)))
  (type (;4;) (func (result f64)))
  (type (;5;) (func (result i32 i64)))
  (type (;6;) (func (param i32) (result i32)))
  (type (;7;) (func (param i64) (result i64)))
  (type (;8;) (func (param f32) (result f32)))
  (type (;9;) (func (param f64) (result f64)))
  (type (;10;) (func (param i32 f64) (result i32 f64)))
  (type (;11;) (func (param i32 i32) (result i32 i32)))
  (type (;12;) (func (param f32 f64) (result f64 f32)))
  (type (;13;) (func (param f64 i32) (result i32 f64)))
  (type (;14;) (func (param f32 i32) (result i32)))
  (type (;15;) (func (param i32 i64) (result i64)))
  (type (;16;) (func (param f64 f32) (result f32)))
  (type (;17;) (func (param i64 f64) (result f64)))
  (type (;18;) (func (result i32 f64)))
  (type (;19;) (func (result i32 i32)))
  (type (;20;) (func (result f64 f32)))
  (type (;21;) (func (param i64 i64) (result i64)))
  (type (;22;) (func (param i64) (result i32)))
  (type (;23;) (func))
  (type (;24;) (func (param f32 i32 i32 f64 f32 f32 f32 f64 f32 i32 i32 f32 f64 i64 i64 i32 i64 i64 f32 i64 i64 i64 i32 f32 f32 f32 f64 f32 i32 i64 f32 f64 f64 f32 i32 f32 f32 f64 i64 f64 i32 i64 f32 f64 i32 i32 i32 i64 f64 i32 i64 i64 f64 f64 f64 f64 f64 f64 i32 f32 f64 f64 i32 i64 f32 f32 f32 i32 f64 f64 f64 f64 f64 f32 i64 i64 i32 i32 i32 f32 f64 i32 i64 f32 f32 f32 i32 i32 f32 f64 i64 f32 f64 f32 f32 f32 i32 f32 i64 i32) (result i32)))
  (func $const-i32 (;0;) (type 1) (result i32)
    i32.const 306
  )
  (func $const-i64 (;1;) (type 2) (result i64)
    i64.const 356
  )
  (func $const-f32 (;2;) (type 3) (result f32)
    f32.const 0x1.e64p+11 (;=3890;)
  )
  (func $const-f64 (;3;) (type 4) (result f64)
    f64.const 0x1.ec8p+11 (;=3940;)
  )
  (func $const-i32-i64 (;4;) (type 5) (result i32 i64)
    i32.const 306
    i64.const 356
  )
  (func $id-i32 (;5;) (type 6) (param i32) (result i32)
    local.get 0
  )
  (func $id-i64 (;6;) (type 7) (param i64) (result i64)
    local.get 0
  )
  (func $id-f32 (;7;) (type 8) (param f32) (result f32)
    local.get 0
  )
  (func $id-f64 (;8;) (type 9) (param f64) (result f64)
    local.get 0
  )
  (func $id-i32-f64 (;9;) (type 10) (param i32 f64) (result i32 f64)
    local.get 0
    local.get 1
  )
  (func $swap-i32-i32 (;10;) (type 11) (param i32 i32) (result i32 i32)
    local.get 1
    local.get 0
  )
  (func $swap-f32-f64 (;11;) (type 12) (param f32 f64) (result f64 f32)
    local.get 1
    local.get 0
  )
  (func $swap-f64-i32 (;12;) (type 13) (param f64 i32) (result i32 f64)
    local.get 1
    local.get 0
  )
  (func $f32-i32 (;13;) (type 14) (param f32 i32) (result i32)
    local.get 1
  )
  (func $i32-i64 (;14;) (type 15) (param i32 i64) (result i64)
    local.get 1
  )
  (func $f64-f32 (;15;) (type 16) (param f64 f32) (result f32)
    local.get 1
  )
  (func $i64-f64 (;16;) (type 17) (param i64 f64) (result f64)
    local.get 1
  )
  (func (;17;) (type 1) (result i32)
    call $const-i32
  )
  (func (;18;) (type 2) (result i64)
    call $const-i64
  )
  (func (;19;) (type 3) (result f32)
    call $const-f32
  )
  (func (;20;) (type 4) (result f64)
    call $const-f64
  )
  (func (;21;) (type 5) (result i32 i64)
    call $const-i32-i64
  )
  (func (;22;) (type 1) (result i32)
    i32.const 32
    call $id-i32
  )
  (func (;23;) (type 2) (result i64)
    i64.const 64
    call $id-i64
  )
  (func (;24;) (type 3) (result f32)
    f32.const 0x1.51eb86p+0 (;=1.32;)
    call $id-f32
  )
  (func (;25;) (type 4) (result f64)
    f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;)
    call $id-f64
  )
  (func (;26;) (type 1) (result i32)
    f32.const 0x1.00ccccp+5 (;=32.1;)
    i32.const 32
    call $f32-i32
  )
  (func (;27;) (type 2) (result i64)
    i32.const 32
    i64.const 64
    call $i32-i64
  )
  (func (;28;) (type 3) (result f32)
    f64.const 0x1p+6 (;=64;)
    f32.const 0x1p+5 (;=32;)
    call $f64-f32
  )
  (func (;29;) (type 4) (result f64)
    i64.const 64
    f64.const 0x1.0066666666666p+6 (;=64.1;)
    call $i64-f64
  )
  (func (;30;) (type 18) (result i32 f64)
    i32.const 32
    f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;)
    call $id-i32-f64
  )
  (func (;31;) (type 19) (result i32 i32)
    i32.const 1
    i32.const 2
    call $swap-i32-i32
  )
  (func (;32;) (type 20) (result f64 f32)
    f32.const 0x1p+0 (;=1;)
    f64.const 0x1p+1 (;=2;)
    call $swap-f32-f64
  )
  (func (;33;) (type 18) (result i32 f64)
    f64.const 0x1p+0 (;=1;)
    i32.const 2
    call $swap-f64-i32
  )
  (func (;34;) (type 1) (result i32)
    i32.const 3
    i32.const 4
    call $swap-i32-i32
    i32.add
  )
  (func (;35;) (type 1) (result i32)
    i32.const 3
    i32.const 4
    call $swap-i32-i32
    i32.const 5
    i32.add
    i32.mul
  )
  (func (;36;) (type 19) (result i32 i32)
    i32.const 3
    i32.const 4
    call $swap-i32-i32
    call $swap-i32-i32
  )
  (func $fac (;37;) (type 7) (param i64) (result i64)
    local.get 0
    i64.eqz
    if (result i64) ;; label = @1
      i64.const 1
    else
      local.get 0
      local.get 0
      i64.const 1
      i64.sub
      call $fac
      i64.mul
    end
  )
  (func $fac-acc (;38;) (type 21) (param i64 i64) (result i64)
    local.get 0
    i64.eqz
    if (result i64) ;; label = @1
      local.get 1
    else
      local.get 0
      i64.const 1
      i64.sub
      local.get 0
      local.get 1
      i64.mul
      call $fac-acc
    end
  )
  (func $fib (;39;) (type 7) (param i64) (result i64)
    local.get 0
    i64.const 1
    i64.le_u
    if (result i64) ;; label = @1
      i64.const 1
    else
      local.get 0
      i64.const 2
      i64.sub
      call $fib
      local.get 0
      i64.const 1
      i64.sub
      call $fib
      i64.add
    end
  )
  (func $even (;40;) (type 22) (param i64) (result i32)
    local.get 0
    i64.eqz
    if (result i32) ;; label = @1
      i32.const 44
    else
      local.get 0
      i64.const 1
      i64.sub
      call $odd
    end
  )
  (func $odd (;41;) (type 22) (param i64) (result i32)
    local.get 0
    i64.eqz
    if (result i32) ;; label = @1
      i32.const 99
    else
      local.get 0
      i64.const 1
      i64.sub
      call $even
    end
  )
  (func $runaway (;42;) (type 23)
    call $runaway
  )
  (func $mutual-runaway1 (;43;) (type 23)
    call $mutual-runaway2
  )
  (func $mutual-runaway2 (;44;) (type 23)
    call $mutual-runaway1
  )
  (func (;45;) (type 1) (result i32)
    call $const-i32
    i32.const 2
    i32.const 3
    select
  )
  (func (;46;) (type 1) (result i32)
    i32.const 2
    call $const-i32
    i32.const 3
    select
  )
  (func (;47;) (type 1) (result i32)
    i32.const 2
    i32.const 3
    call $const-i32
    select
  )
  (func (;48;) (type 1) (result i32)
    call $const-i32
    if (result i32) ;; label = @1
      i32.const 1
    else
      i32.const 2
    end
  )
  (func (;49;) (type 1) (result i32)
    block (result i32) ;; label = @1
      call $const-i32
      i32.const 2
      br_if 0 (;@1;)
    end
  )
  (func (;50;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      call $const-i32
      br_if 0 (;@1;)
    end
  )
  (func (;51;) (type 1) (result i32)
    block (result i32) ;; label = @1
      call $const-i32
      i32.const 2
      br_table 0 (;@1;) 0 (;@1;)
    end
  )
  (func (;52;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      call $const-i32
      br_table 0 (;@1;) 0 (;@1;)
    end
  )
  (func $func (;53;) (type $check) (param i32 i32) (result i32)
    local.get 0
  )
  (func (;54;) (type 1) (result i32)
    block (result i32) ;; label = @1
      call $const-i32
      i32.const 2
      i32.const 0
      call_indirect (type $check)
    end
  )
  (func (;55;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      call $const-i32
      i32.const 0
      call_indirect (type $check)
    end
  )
  (func (;56;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      i32.const 2
      call $const-i32
      call_indirect (type $check)
    end
  )
  (func (;57;) (type 23)
    call $const-i32
    i32.const 1
    i32.store
  )
  (func (;58;) (type 23)
    i32.const 10
    call $const-i32
    i32.store
  )
  (func (;59;) (type 1) (result i32)
    call $const-i32
    memory.grow
  )
  (func (;60;) (type 1) (result i32)
    call $const-i32
    return
  )
  (func (;61;) (type 23)
    call $const-i32
    drop
  )
  (func (;62;) (type 1) (result i32)
    block (result i32) ;; label = @1
      call $const-i32
      br 0 (;@1;)
    end
  )
  (func (;63;) (type 1) (result i32)
    (local i32)
    call $const-i32
    local.set 0
    local.get 0
  )
  (func (;64;) (type 1) (result i32)
    (local i32)
    call $const-i32
    local.tee 0
  )
  (func (;65;) (type 1) (result i32)
    call $const-i32
    global.set $a
    global.get $a
  )
  (func (;66;) (type 1) (result i32)
    call $const-i32
    i32.load
  )
  (func $dummy (;67;) (type 6) (param i32) (result i32)
    local.get 0
  )
  (func $du (;68;) (type 8) (param f32) (result f32)
    local.get 0
  )
  (func (;69;) (type 3) (result f32)
    block (result f32) ;; label = @1
      f32.const 0x0p+0 (;=0;)
      call $du
      f32.sqrt
    end
  )
  (func (;70;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      call $dummy
      i32.const 10
      i32.add
    end
  )
  (func (;71;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 10
      i32.const 1
      call $dummy
      i32.sub
    end
  )
  (func (;72;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      call $dummy
      i32.eqz
    end
  )
  (func (;73;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      call $dummy
      i32.const 10
      i32.le_u
    end
  )
  (func (;74;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 10
      i32.const 1
      call $dummy
      i32.ne
    end
  )
  (func (;75;) (type 2) (result i64)
    block (result i64) ;; label = @1
      i32.const 1
      call $dummy
      i64.extend_i32_s
    end
  )
  (func $return-from-long-argument-list-helper (;76;) (type 24) (param f32 i32 i32 f64 f32 f32 f32 f64 f32 i32 i32 f32 f64 i64 i64 i32 i64 i64 f32 i64 i64 i64 i32 f32 f32 f32 f64 f32 i32 i64 f32 f64 f64 f32 i32 f32 f32 f64 i64 f64 i32 i64 f32 f64 i32 i32 i32 i64 f64 i32 i64 i64 f64 f64 f64 f64 f64 f64 i32 f32 f64 f64 i32 i64 f32 f32 f32 i32 f64 f64 f64 f64 f64 f32 i64 i64 i32 i32 i32 f32 f64 i32 i64 f32 f32 f32 i32 i32 f32 f64 i64 f32 f64 f32 f32 f32 i32 f32 i64 i32) (result i32)
    local.get 99
  )
  (func (;77;) (type 6) (param i32) (result i32)
    f32.const 0x0p+0 (;=0;)
    i32.const 0
    i32.const 0
    f64.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    i32.const 0
    i32.const 0
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    i64.const 0
    i64.const 0
    i32.const 0
    i64.const 0
    i64.const 0
    f32.const 0x0p+0 (;=0;)
    i64.const 0
    i64.const 0
    i64.const 0
    i32.const 0
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    i32.const 0
    i64.const 0
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    i32.const 0
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    i64.const 0
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    i64.const 0
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    i32.const 0
    i32.const 0
    i64.const 0
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    i64.const 0
    i64.const 0
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    i64.const 0
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    i32.const 0
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    i64.const 0
    i64.const 0
    i32.const 0
    i32.const 0
    i32.const 0
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    i64.const 0
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    i32.const 0
    i32.const 0
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    i64.const 0
    f32.const 0x0p+0 (;=0;)
    f64.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    f32.const 0x0p+0 (;=0;)
    i32.const 0
    f32.const 0x0p+0 (;=0;)
    i64.const 0
    local.get 0
    call $return-from-long-argument-list-helper
  )
  (table (;0;) 1 1 funcref)
  (memory (;0;) 1)
  (global $a (;0;) (mut i32) i32.const 10)
  (export "type-i32" (func 17))
  (export "type-i64" (func 18))
  (export "type-f32" (func 19))
  (export "type-f64" (func 20))
  (export "type-i32-i64" (func 21))
  (export "type-first-i32" (func 22))
  (export "type-first-i64" (func 23))
  (export "type-first-f32" (func 24))
  (export "type-first-f64" (func 25))
  (export "type-second-i32" (func 26))
  (export "type-second-i64" (func 27))
  (export "type-second-f32" (func 28))
  (export "type-second-f64" (func 29))
  (export "type-all-i32-f64" (func 30))
  (export "type-all-i32-i32" (func 31))
  (export "type-all-f32-f64" (func 32))
  (export "type-all-f64-i32" (func 33))
  (export "as-binary-all-operands" (func 34))
  (export "as-mixed-operands" (func 35))
  (export "as-call-all-operands" (func 36))
  (export "fac" (func $fac))
  (export "fac-acc" (func $fac-acc))
  (export "fib" (func $fib))
  (export "even" (func $even))
  (export "odd" (func $odd))
  (export "runaway" (func $runaway))
  (export "mutual-runaway" (func $mutual-runaway1))
  (export "as-select-first" (func 45))
  (export "as-select-mid" (func 46))
  (export "as-select-last" (func 47))
  (export "as-if-condition" (func 48))
  (export "as-br_if-first" (func 49))
  (export "as-br_if-last" (func 50))
  (export "as-br_table-first" (func 51))
  (export "as-br_table-last" (func 52))
  (export "as-call_indirect-first" (func 54))
  (export "as-call_indirect-mid" (func 55))
  (export "as-call_indirect-last" (func 56))
  (export "as-store-first" (func 57))
  (export "as-store-last" (func 58))
  (export "as-memory.grow-value" (func 59))
  (export "as-return-value" (func 60))
  (export "as-drop-operand" (func 61))
  (export "as-br-value" (func 62))
  (export "as-local.set-value" (func 63))
  (export "as-local.tee-value" (func 64))
  (export "as-global.set-value" (func 65))
  (export "as-load-operand" (func 66))
  (export "as-unary-operand" (func 69))
  (export "as-binary-left" (func 70))
  (export "as-binary-right" (func 71))
  (export "as-test-operand" (func 72))
  (export "as-compare-left" (func 73))
  (export "as-compare-right" (func 74))
  (export "as-convert-operand" (func 75))
  (export "return-from-long-argument-list" (func 77))
  (elem (;0;) (i32.const 0) func $func)
)