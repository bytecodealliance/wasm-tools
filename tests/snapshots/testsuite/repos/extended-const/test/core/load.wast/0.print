(module
  (type $sig (;0;) (func (param i32 i32 i32) (result i32)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func))
  (type (;3;) (func (param i32 i32) (result i32)))
  (func (;0;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 0
      i32.load
      br 0 (;@1;)
    end
  )
  (func (;1;) (type 2)
    block ;; label = @1
      i32.const 0
      i32.load
      br_if 0 (;@1;)
    end
  )
  (func (;2;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 0
      i32.load
      i32.const 1
      br_if 0 (;@1;)
      drop
      i32.const 7
    end
  )
  (func (;3;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 6
      i32.const 0
      i32.load
      br_if 0 (;@1;)
      drop
      i32.const 7
    end
  )
  (func (;4;) (type 2)
    block ;; label = @1
      i32.const 0
      i32.load
      br_table 0 (;@1;) 0 (;@1;) 0 (;@1;)
    end
  )
  (func (;5;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 0
      i32.load
      i32.const 1
      br_table 0 (;@1;) 0 (;@1;) 0 (;@1;)
      i32.const 7
    end
  )
  (func (;6;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 6
      i32.const 0
      i32.load
      br_table 0 (;@1;) 0 (;@1;)
      i32.const 7
    end
  )
  (func (;7;) (type 1) (result i32)
    i32.const 0
    i32.load
    return
  )
  (func (;8;) (type 1) (result i32)
    i32.const 0
    i32.load
    if (result i32) ;; label = @1
      i32.const 0
    else
      i32.const 1
    end
  )
  (func (;9;) (type 1) (result i32)
    i32.const 1
    if (result i32) ;; label = @1
      i32.const 0
      i32.load
    else
      i32.const 0
    end
  )
  (func (;10;) (type 1) (result i32)
    i32.const 0
    if (result i32) ;; label = @1
      i32.const 0
    else
      i32.const 0
      i32.load
    end
  )
  (func (;11;) (type 3) (param i32 i32) (result i32)
    i32.const 0
    i32.load
    local.get 0
    local.get 1
    select
  )
  (func (;12;) (type 3) (param i32 i32) (result i32)
    local.get 0
    i32.const 0
    i32.load
    local.get 1
    select
  )
  (func (;13;) (type 1) (result i32)
    i32.const 0
    i32.const 1
    i32.const 0
    i32.load
    select
  )
  (func $f (;14;) (type $sig) (param i32 i32 i32) (result i32)
    i32.const -1
  )
  (func (;15;) (type 1) (result i32)
    i32.const 0
    i32.load
    i32.const 2
    i32.const 3
    call $f
  )
  (func (;16;) (type 1) (result i32)
    i32.const 1
    i32.const 0
    i32.load
    i32.const 3
    call $f
  )
  (func (;17;) (type 1) (result i32)
    i32.const 1
    i32.const 2
    i32.const 0
    i32.load
    call $f
  )
  (func (;18;) (type 1) (result i32)
    i32.const 0
    i32.load
    i32.const 2
    i32.const 3
    i32.const 0
    call_indirect (type $sig)
  )
  (func (;19;) (type 1) (result i32)
    i32.const 1
    i32.const 0
    i32.load
    i32.const 3
    i32.const 0
    call_indirect (type $sig)
  )
  (func (;20;) (type 1) (result i32)
    i32.const 1
    i32.const 2
    i32.const 0
    i32.load
    i32.const 0
    call_indirect (type $sig)
  )
  (func (;21;) (type 1) (result i32)
    i32.const 1
    i32.const 2
    i32.const 3
    i32.const 0
    i32.load
    call_indirect (type $sig)
  )
  (func (;22;) (type 2)
    (local i32)
    i32.const 0
    i32.load
    local.set 0
  )
  (func (;23;) (type 1) (result i32)
    (local i32)
    i32.const 0
    i32.load
    local.tee 0
  )
  (func (;24;) (type 2)
    (local i32)
    i32.const 0
    i32.load
    global.set $g
  )
  (func (;25;) (type 1) (result i32)
    i32.const 0
    i32.load
    i32.load
  )
  (func (;26;) (type 1) (result i32)
    i32.const 0
    i32.load
    i32.load8_s
  )
  (func (;27;) (type 2)
    i32.const 0
    i32.load
    i32.const 7
    i32.store
  )
  (func (;28;) (type 2)
    i32.const 2
    i32.const 0
    i32.load
    i32.store
  )
  (func (;29;) (type 2)
    i32.const 0
    i32.load8_s
    i32.const 7
    i32.store8
  )
  (func (;30;) (type 2)
    i32.const 2
    i32.const 0
    i32.load
    i32.store16
  )
  (func (;31;) (type 1) (result i32)
    i32.const 100
    i32.load
    i32.clz
  )
  (func (;32;) (type 1) (result i32)
    i32.const 100
    i32.load
    i32.const 10
    i32.add
  )
  (func (;33;) (type 1) (result i32)
    i32.const 10
    i32.const 100
    i32.load
    i32.sub
  )
  (func (;34;) (type 1) (result i32)
    i32.const 100
    i32.load
    i32.eqz
  )
  (func (;35;) (type 1) (result i32)
    i32.const 100
    i32.load
    i32.const 10
    i32.le_s
  )
  (func (;36;) (type 1) (result i32)
    i32.const 10
    i32.const 100
    i32.load
    i32.ne
  )
  (func (;37;) (type 1) (result i32)
    i32.const 100
    i32.load
    memory.grow
  )
  (table (;0;) 1 1 funcref)
  (memory (;0;) 1)
  (global $g (;0;) (mut i32) i32.const 0)
  (export "as-br-value" (func 0))
  (export "as-br_if-cond" (func 1))
  (export "as-br_if-value" (func 2))
  (export "as-br_if-value-cond" (func 3))
  (export "as-br_table-index" (func 4))
  (export "as-br_table-value" (func 5))
  (export "as-br_table-value-index" (func 6))
  (export "as-return-value" (func 7))
  (export "as-if-cond" (func 8))
  (export "as-if-then" (func 9))
  (export "as-if-else" (func 10))
  (export "as-select-first" (func 11))
  (export "as-select-second" (func 12))
  (export "as-select-cond" (func 13))
  (export "as-call-first" (func 15))
  (export "as-call-mid" (func 16))
  (export "as-call-last" (func 17))
  (export "as-call_indirect-first" (func 18))
  (export "as-call_indirect-mid" (func 19))
  (export "as-call_indirect-last" (func 20))
  (export "as-call_indirect-index" (func 21))
  (export "as-local.set-value" (func 22))
  (export "as-local.tee-value" (func 23))
  (export "as-global.set-value" (func 24))
  (export "as-load-address" (func 25))
  (export "as-loadN-address" (func 26))
  (export "as-store-address" (func 27))
  (export "as-store-value" (func 28))
  (export "as-storeN-address" (func 29))
  (export "as-storeN-value" (func 30))
  (export "as-unary-operand" (func 31))
  (export "as-binary-left" (func 32))
  (export "as-binary-right" (func 33))
  (export "as-test-operand" (func 34))
  (export "as-compare-left" (func 35))
  (export "as-compare-right" (func 36))
  (export "as-memory.grow-size" (func 37))
  (elem (;0;) (i32.const 0) func $f)
)