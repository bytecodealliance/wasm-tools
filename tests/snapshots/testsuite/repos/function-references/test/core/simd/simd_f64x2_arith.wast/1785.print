(module
  (type (;0;) (func (result v128)))
  (func (;0;) (type 0) (result v128)
    v128.const i32x4 0x00000000 0x7ff80000 0x00000000 0x3ff00000
    v128.const i32x4 0x00000000 0x7ff80000 0x00000000 0x3ff00000
    f64x2.add
  )
  (func (;1;) (type 0) (result v128)
    v128.const i32x4 0x00000000 0x7ff80000 0x00000000 0x3ff00000
    v128.const i32x4 0x00000000 0x40000000 0x00000000 0xfff80000
    f64x2.div
  )
  (func (;2;) (type 0) (result v128)
    v128.const i32x4 0x00000000 0x7ff80000 0x00000000 0x3ff00000
    v128.const i32x4 0x00000000 0x40000000 0x00000000 0x7ff80000
    f64x2.mul
  )
  (func (;3;) (type 0) (result v128)
    v128.const i32x4 0x00000000 0x7ff80000 0x00000000 0x3ff00000
    f64x2.neg
  )
  (func (;4;) (type 0) (result v128)
    v128.const i32x4 0x00000000 0x40100000 0x00000000 0xfff80000
    f64x2.sqrt
  )
  (func (;5;) (type 0) (result v128)
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0xbff00000
    v128.const i32x4 0x00000000 0xfff80000 0x00000000 0x3ff00000
    f64x2.sub
  )
  (export "f64x2_add_arith" (func 0))
  (export "f64x2_div_mixed" (func 1))
  (export "f64x2_mul_mixed" (func 2))
  (export "f64x2_neg_canon" (func 3))
  (export "f64x2_sqrt_canon" (func 4))
  (export "f64x2_sub_arith" (func 5))
)