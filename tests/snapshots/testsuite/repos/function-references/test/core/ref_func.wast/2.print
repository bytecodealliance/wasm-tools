(module
  (type (;0;) (func (param i32) (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (result i32)))
  (import "M" "f" (func $f (;0;) (type 0)))
  (func $g (;1;) (type 0) (param $x i32) (result i32)
    local.get $x
    i32.const 1
    i32.add
  )
  (func (;2;) (type 1)
    ref.func $ff1
    drop
    ref.func $ff2
    drop
  )
  (func $gf1 (;3;) (type 1))
  (func $gf2 (;4;) (type 1))
  (func $ff1 (;5;) (type 1))
  (func $ff2 (;6;) (type 1))
  (func (;7;) (type 2) (result i32)
    ref.func $f
    ref.is_null
  )
  (func (;8;) (type 2) (result i32)
    ref.func $g
    ref.is_null
  )
  (func (;9;) (type 2) (result i32)
    global.get $v
    ref.is_null
  )
  (func (;10;) (type 1)
    ref.func $f
    global.set $v
  )
  (func (;11;) (type 1)
    ref.func $g
    global.set $v
  )
  (func (;12;) (type 0) (param $x i32) (result i32)
    i32.const 0
    ref.func $f
    table.set $t
    local.get $x
    i32.const 0
    call_indirect (type 0)
  )
  (func (;13;) (type 0) (param $x i32) (result i32)
    i32.const 0
    ref.func $g
    table.set $t
    local.get $x
    i32.const 0
    call_indirect (type 0)
  )
  (func (;14;) (type 0) (param $x i32) (result i32)
    i32.const 0
    global.get $v
    table.set $t
    local.get $x
    i32.const 0
    call_indirect (type 0)
  )
  (table $t (;0;) 1 funcref)
  (global (;0;) funcref ref.func $f)
  (global (;1;) funcref ref.func $g)
  (global $v (;2;) (mut funcref) ref.func $f)
  (global (;3;) funcref ref.func $gf1)
  (global (;4;) funcref ref.func $gf2)
  (export "is_null-f" (func 7))
  (export "is_null-g" (func 8))
  (export "is_null-v" (func 9))
  (export "set-f" (func 10))
  (export "set-g" (func 11))
  (export "call-f" (func 12))
  (export "call-g" (func 13))
  (export "call-v" (func 14))
  (elem (;0;) declare func $gf1 $ff1)
  (elem (;1;) declare funcref (ref.func $gf2) (ref.func $ff2))
  (elem (;2;) declare func $f $g)
)