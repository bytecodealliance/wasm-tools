(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (result i64)))
  (type (;2;) (func (result f32)))
  (type (;3;) (func (result f64)))
  (type (;4;) (func (param i32) (result i32)))
  (type (;5;) (func (param i64) (result i64)))
  (type (;6;) (func (param f32) (result f32)))
  (type (;7;) (func (param f64) (result f64)))
  (type (;8;) (func (param f32 i32) (result i32)))
  (type (;9;) (func (param i32 i64) (result i64)))
  (type (;10;) (func (param f64 f32) (result f32)))
  (type (;11;) (func (param i64 f64) (result f64)))
  (type (;12;) (func (param i64 i64) (result i64)))
  (type (;13;) (func (param i64) (result i32)))
  (func $const-i32 (;0;) (type 0) (result i32)
    i32.const 306
  )
  (func $const-i64 (;1;) (type 1) (result i64)
    i64.const 356
  )
  (func $const-f32 (;2;) (type 2) (result f32)
    f32.const 0x1.e64p+11 (;=3890;)
  )
  (func $const-f64 (;3;) (type 3) (result f64)
    f64.const 0x1.ec8p+11 (;=3940;)
  )
  (func $id-i32 (;4;) (type 4) (param i32) (result i32)
    local.get 0
  )
  (func $id-i64 (;5;) (type 5) (param i64) (result i64)
    local.get 0
  )
  (func $id-f32 (;6;) (type 6) (param f32) (result f32)
    local.get 0
  )
  (func $id-f64 (;7;) (type 7) (param f64) (result f64)
    local.get 0
  )
  (func $f32-i32 (;8;) (type 8) (param f32 i32) (result i32)
    local.get 1
  )
  (func $i32-i64 (;9;) (type 9) (param i32 i64) (result i64)
    local.get 1
  )
  (func $f64-f32 (;10;) (type 10) (param f64 f32) (result f32)
    local.get 1
  )
  (func $i64-f64 (;11;) (type 11) (param i64 f64) (result f64)
    local.get 1
  )
  (func (;12;) (type 0) (result i32)
    return_call $const-i32
  )
  (func (;13;) (type 1) (result i64)
    return_call $const-i64
  )
  (func (;14;) (type 2) (result f32)
    return_call $const-f32
  )
  (func (;15;) (type 3) (result f64)
    return_call $const-f64
  )
  (func (;16;) (type 0) (result i32)
    i32.const 32
    return_call $id-i32
  )
  (func (;17;) (type 1) (result i64)
    i64.const 64
    return_call $id-i64
  )
  (func (;18;) (type 2) (result f32)
    f32.const 0x1.51eb86p+0 (;=1.32;)
    return_call $id-f32
  )
  (func (;19;) (type 3) (result f64)
    f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;)
    return_call $id-f64
  )
  (func (;20;) (type 0) (result i32)
    f32.const 0x1.00ccccp+5 (;=32.1;)
    i32.const 32
    return_call $f32-i32
  )
  (func (;21;) (type 1) (result i64)
    i32.const 32
    i64.const 64
    return_call $i32-i64
  )
  (func (;22;) (type 2) (result f32)
    f64.const 0x1p+6 (;=64;)
    f32.const 0x1p+5 (;=32;)
    return_call $f64-f32
  )
  (func (;23;) (type 3) (result f64)
    i64.const 64
    f64.const 0x1.0066666666666p+6 (;=64.1;)
    return_call $i64-f64
  )
  (func $fac-acc (;24;) (type 12) (param i64 i64) (result i64)
    local.get 0
    i64.eqz
    if (result i64) ;; label = @1
      local.get 1
    else
      local.get 0
      i64.const 1
      i64.sub
      local.get 0
      local.get 1
      i64.mul
      return_call $fac-acc
    end
  )
  (func $count (;25;) (type 5) (param i64) (result i64)
    local.get 0
    i64.eqz
    if (result i64) ;; label = @1
      local.get 0
    else
      local.get 0
      i64.const 1
      i64.sub
      return_call $count
    end
  )
  (func $even (;26;) (type 13) (param i64) (result i32)
    local.get 0
    i64.eqz
    if (result i32) ;; label = @1
      i32.const 44
    else
      local.get 0
      i64.const 1
      i64.sub
      return_call $odd
    end
  )
  (func $odd (;27;) (type 13) (param i64) (result i32)
    local.get 0
    i64.eqz
    if (result i32) ;; label = @1
      i32.const 99
    else
      local.get 0
      i64.const 1
      i64.sub
      return_call $even
    end
  )
  (export "type-i32" (func 12))
  (export "type-i64" (func 13))
  (export "type-f32" (func 14))
  (export "type-f64" (func 15))
  (export "type-first-i32" (func 16))
  (export "type-first-i64" (func 17))
  (export "type-first-f32" (func 18))
  (export "type-first-f64" (func 19))
  (export "type-second-i32" (func 20))
  (export "type-second-i64" (func 21))
  (export "type-second-f32" (func 22))
  (export "type-second-f64" (func 23))
  (export "fac-acc" (func $fac-acc))
  (export "count" (func $count))
  (export "even" (func $even))
  (export "odd" (func $odd))
)