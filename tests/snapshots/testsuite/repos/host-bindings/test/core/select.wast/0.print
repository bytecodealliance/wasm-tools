(module
  (type $check (;0;) (func (param i32 i32) (result i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32 i32 i32) (result i32)))
  (type (;3;) (func (param i64 i64 i32) (result i64)))
  (type (;4;) (func (param f32 f32 i32) (result f32)))
  (type (;5;) (func (param f64 f64 i32) (result f64)))
  (type (;6;) (func (param funcref funcref i32) (result funcref)))
  (type (;7;) (func (param externref externref i32) (result externref)))
  (type (;8;) (func (param i32) (result i32)))
  (type (;9;) (func (param i32)))
  (func $dummy (;0;) (type 1))
  (func (;1;) (type 2) (param i32 i32 i32) (result i32)
    local.get 0
    local.get 1
    local.get 2
    select
  )
  (func (;2;) (type 3) (param i64 i64 i32) (result i64)
    local.get 0
    local.get 1
    local.get 2
    select
  )
  (func (;3;) (type 4) (param f32 f32 i32) (result f32)
    local.get 0
    local.get 1
    local.get 2
    select
  )
  (func (;4;) (type 5) (param f64 f64 i32) (result f64)
    local.get 0
    local.get 1
    local.get 2
    select
  )
  (func (;5;) (type 2) (param i32 i32 i32) (result i32)
    local.get 0
    local.get 1
    local.get 2
    select (result i32)
  )
  (func (;6;) (type 3) (param i64 i64 i32) (result i64)
    local.get 0
    local.get 1
    local.get 2
    select (result i64)
  )
  (func (;7;) (type 4) (param f32 f32 i32) (result f32)
    local.get 0
    local.get 1
    local.get 2
    select (result f32)
  )
  (func (;8;) (type 5) (param f64 f64 i32) (result f64)
    local.get 0
    local.get 1
    local.get 2
    select (result f64)
  )
  (func (;9;) (type 6) (param funcref funcref i32) (result funcref)
    local.get 0
    local.get 1
    local.get 2
    select (result funcref)
  )
  (func (;10;) (type 7) (param externref externref i32) (result externref)
    local.get 0
    local.get 1
    local.get 2
    select (result externref)
  )
  (func (;11;) (type 8) (param i32) (result i32)
    i32.const 0
    i32.const 1
    local.get 0
    select
    i32.const 2
    i32.const 3
    select
  )
  (func (;12;) (type 8) (param i32) (result i32)
    i32.const 2
    i32.const 0
    i32.const 1
    local.get 0
    select
    i32.const 3
    select
  )
  (func (;13;) (type 8) (param i32) (result i32)
    i32.const 2
    i32.const 3
    i32.const 0
    i32.const 1
    local.get 0
    select
    select
  )
  (func (;14;) (type 8) (param i32) (result i32)
    loop (result i32) ;; label = @1
      i32.const 2
      i32.const 3
      local.get 0
      select
      call $dummy
      call $dummy
    end
  )
  (func (;15;) (type 8) (param i32) (result i32)
    loop (result i32) ;; label = @1
      call $dummy
      i32.const 2
      i32.const 3
      local.get 0
      select
      call $dummy
    end
  )
  (func (;16;) (type 8) (param i32) (result i32)
    loop (result i32) ;; label = @1
      call $dummy
      call $dummy
      i32.const 2
      i32.const 3
      local.get 0
      select
    end
  )
  (func (;17;) (type 9) (param i32)
    i32.const 2
    i32.const 3
    local.get 0
    select
    if ;; label = @1
      call $dummy
    end
  )
  (func (;18;) (type 8) (param i32) (result i32)
    i32.const 1
    if (result i32) ;; label = @1
      i32.const 2
      i32.const 3
      local.get 0
      select
    else
      i32.const 4
    end
  )
  (func (;19;) (type 8) (param i32) (result i32)
    i32.const 0
    if (result i32) ;; label = @1
      i32.const 2
    else
      i32.const 2
      i32.const 3
      local.get 0
      select
    end
  )
  (func (;20;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      i32.const 3
      local.get 0
      select
      i32.const 4
      br_if 0 (;@1;)
    end
  )
  (func (;21;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      i32.const 2
      i32.const 3
      local.get 0
      select
      br_if 0 (;@1;)
    end
  )
  (func (;22;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      i32.const 3
      local.get 0
      select
      i32.const 2
      br_table 0 (;@1;) 0 (;@1;)
    end
  )
  (func (;23;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      i32.const 2
      i32.const 3
      local.get 0
      select
      br_table 0 (;@1;) 0 (;@1;)
    end
  )
  (func $func (;24;) (type $check) (param i32 i32) (result i32)
    local.get 0
  )
  (func (;25;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      i32.const 3
      local.get 0
      select
      i32.const 1
      i32.const 0
      call_indirect $t (type $check)
    end
  )
  (func (;26;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      i32.const 2
      i32.const 3
      local.get 0
      select
      i32.const 0
      call_indirect $t (type $check)
    end
  )
  (func (;27;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      i32.const 4
      i32.const 2
      i32.const 3
      local.get 0
      select
      call_indirect $t (type $check)
    end
  )
  (func (;28;) (type 9) (param i32)
    i32.const 0
    i32.const 4
    local.get 0
    select
    i32.const 1
    i32.store
  )
  (func (;29;) (type 9) (param i32)
    i32.const 8
    i32.const 1
    i32.const 2
    local.get 0
    select
    i32.store
  )
  (func (;30;) (type 8) (param i32) (result i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    memory.grow
  )
  (func $f (;31;) (type 8) (param i32) (result i32)
    local.get 0
  )
  (func (;32;) (type 8) (param i32) (result i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    call $f
  )
  (func (;33;) (type 8) (param i32) (result i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    return
  )
  (func (;34;) (type 9) (param i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    drop
  )
  (func (;35;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      i32.const 2
      local.get 0
      select
      br 0 (;@1;)
    end
  )
  (func (;36;) (type 8) (param i32) (result i32)
    (local i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    local.set 0
    local.get 0
  )
  (func (;37;) (type 8) (param i32) (result i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    local.tee 0
  )
  (func (;38;) (type 8) (param i32) (result i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    global.set $a
    global.get $a
  )
  (func (;39;) (type 8) (param i32) (result i32)
    i32.const 0
    i32.const 4
    local.get 0
    select
    i32.load
  )
  (func (;40;) (type 8) (param i32) (result i32)
    i32.const 0
    i32.const 1
    local.get 0
    select
    i32.eqz
  )
  (func (;41;) (type 8) (param i32) (result i32)
    i32.const 1
    i32.const 2
    local.get 0
    select
    i32.const 1
    i32.const 2
    local.get 0
    select
    i32.mul
  )
  (func (;42;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 0
      i32.const 1
      local.get 0
      select
      i32.eqz
    end
  )
  (func (;43;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      i32.const 2
      local.get 0
      select
      i32.const 1
      i32.le_s
    end
  )
  (func (;44;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      i32.const 0
      i32.const 1
      local.get 0
      select
      i32.ne
    end
  )
  (func (;45;) (type 8) (param i32) (result i32)
    block (result i32) ;; label = @1
      i64.const 1
      i64.const 0
      local.get 0
      select
      i32.wrap_i64
    end
  )
  (table $tab (;0;) 1 1 funcref)
  (table $t (;1;) 1 1 funcref)
  (memory (;0;) 1)
  (global $a (;0;) (mut i32) i32.const 10)
  (export "select-i32" (func 1))
  (export "select-i64" (func 2))
  (export "select-f32" (func 3))
  (export "select-f64" (func 4))
  (export "select-i32-t" (func 5))
  (export "select-i64-t" (func 6))
  (export "select-f32-t" (func 7))
  (export "select-f64-t" (func 8))
  (export "select-funcref" (func 9))
  (export "select-externref" (func 10))
  (export "as-select-first" (func 11))
  (export "as-select-mid" (func 12))
  (export "as-select-last" (func 13))
  (export "as-loop-first" (func 14))
  (export "as-loop-mid" (func 15))
  (export "as-loop-last" (func 16))
  (export "as-if-condition" (func 17))
  (export "as-if-then" (func 18))
  (export "as-if-else" (func 19))
  (export "as-br_if-first" (func 20))
  (export "as-br_if-last" (func 21))
  (export "as-br_table-first" (func 22))
  (export "as-br_table-last" (func 23))
  (export "as-call_indirect-first" (func 25))
  (export "as-call_indirect-mid" (func 26))
  (export "as-call_indirect-last" (func 27))
  (export "as-store-first" (func 28))
  (export "as-store-last" (func 29))
  (export "as-memory.grow-value" (func 30))
  (export "as-call-value" (func 32))
  (export "as-return-value" (func 33))
  (export "as-drop-operand" (func 34))
  (export "as-br-value" (func 35))
  (export "as-local.set-value" (func 36))
  (export "as-local.tee-value" (func 37))
  (export "as-global.set-value" (func 38))
  (export "as-load-operand" (func 39))
  (export "as-unary-operand" (func 40))
  (export "as-binary-operand" (func 41))
  (export "as-test-operand" (func 42))
  (export "as-compare-left" (func 43))
  (export "as-compare-right" (func 44))
  (export "as-convert-operand" (func 45))
  (elem (;0;) (i32.const 0) func $dummy)
  (elem (;1;) (table $t) (i32.const 0) func $func)
)