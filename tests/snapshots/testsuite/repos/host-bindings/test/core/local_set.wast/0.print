(module
  (type (;0;) (func))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param i64)))
  (type (;3;) (func (param f32)))
  (type (;4;) (func (param f64)))
  (type (;5;) (func (param i64 f32 f64 i32 i32)))
  (type (;6;) (func (param i64 f32 f64 i32 i32) (result i64)))
  (func (;0;) (type 0)
    (local i32)
    i32.const 0
    local.set 0
  )
  (func (;1;) (type 0)
    (local i64)
    i64.const 0
    local.set 0
  )
  (func (;2;) (type 0)
    (local f32)
    f32.const 0x0p+0 (;=0;)
    local.set 0
  )
  (func (;3;) (type 0)
    (local f64)
    f64.const 0x0p+0 (;=0;)
    local.set 0
  )
  (func (;4;) (type 1) (param i32)
    i32.const 10
    local.set 0
  )
  (func (;5;) (type 2) (param i64)
    i64.const 11
    local.set 0
  )
  (func (;6;) (type 3) (param f32)
    f32.const 0x1.633334p+3 (;=11.1;)
    local.set 0
  )
  (func (;7;) (type 4) (param f64)
    f64.const 0x1.8666666666666p+3 (;=12.2;)
    local.set 0
  )
  (func (;8;) (type 5) (param i64 f32 f64 i32 i32)
    (local f32 i64 i64 f64)
    i64.const 0
    local.set 0
    f32.const 0x0p+0 (;=0;)
    local.set 1
    f64.const 0x0p+0 (;=0;)
    local.set 2
    i32.const 0
    local.set 3
    i32.const 0
    local.set 4
    f32.const 0x0p+0 (;=0;)
    local.set 5
    i64.const 0
    local.set 6
    i64.const 0
    local.set 7
    f64.const 0x0p+0 (;=0;)
    local.set 8
  )
  (func (;9;) (type 6) (param i64 f32 f64 i32 i32) (result i64)
    (local f32 i64 i64 f64)
    f32.const -0x1.333334p-2 (;=-0.3;)
    local.set 1
    i32.const 40
    local.set 3
    i32.const -7
    local.set 4
    f32.const 0x1.6p+2 (;=5.5;)
    local.set 5
    i64.const 6
    local.set 6
    f64.const 0x1p+3 (;=8;)
    local.set 8
    local.get 0
    f64.convert_i64_u
    local.get 1
    f64.promote_f32
    local.get 2
    local.get 3
    f64.convert_i32_u
    local.get 4
    f64.convert_i32_s
    local.get 5
    f64.promote_f32
    local.get 6
    f64.convert_i64_u
    local.get 7
    f64.convert_i64_u
    local.get 8
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    f64.add
    i64.trunc_f64_s
  )
  (func (;10;) (type 1) (param i32)
    block ;; label = @1
      i32.const 1
      local.set 0
    end
  )
  (func (;11;) (type 1) (param i32)
    loop ;; label = @1
      i32.const 3
      local.set 0
    end
  )
  (func (;12;) (type 1) (param i32)
    block ;; label = @1
      i32.const 9
      local.set 0
      br 0 (;@1;)
    end
  )
  (func (;13;) (type 1) (param i32)
    block ;; label = @1
      i32.const 8
      local.set 0
      i32.const 1
      br_if 0 (;@1;)
    end
  )
  (func (;14;) (type 1) (param i32)
    block ;; label = @1
      i32.const 6
      i32.const 9
      local.set 0
      br_if 0 (;@1;)
    end
  )
  (func (;15;) (type 1) (param i32)
    block ;; label = @1
      i32.const 10
      local.set 0
      i32.const 1
      br_table 0 (;@1;)
    end
  )
  (func (;16;) (type 1) (param i32)
    i32.const 7
    local.set 0
    return
  )
  (func (;17;) (type 1) (param i32)
    local.get 0
    if ;; label = @1
      i32.const 3
      local.set 0
    end
  )
  (func (;18;) (type 1) (param i32)
    local.get 0
    if ;; label = @1
    else
      i32.const 1
      local.set 0
    end
  )
  (export "type-local-i32" (func 0))
  (export "type-local-i64" (func 1))
  (export "type-local-f32" (func 2))
  (export "type-local-f64" (func 3))
  (export "type-param-i32" (func 4))
  (export "type-param-i64" (func 5))
  (export "type-param-f32" (func 6))
  (export "type-param-f64" (func 7))
  (export "type-mixed" (func 8))
  (export "write" (func 9))
  (export "as-block-value" (func 10))
  (export "as-loop-value" (func 11))
  (export "as-br-value" (func 12))
  (export "as-br_if-value" (func 13))
  (export "as-br_if-value-cond" (func 14))
  (export "as-br_table-value" (func 15))
  (export "as-return-value" (func 16))
  (export "as-if-then" (func 17))
  (export "as-if-else" (func 18))
)