(module
  (type $t (;0;) (func))
  (type (;1;) (func (param (ref $t))))
  (type (;2;) (func (result (ref null $t))))
  (type (;3;) (func (result (ref null $t) (ref exn))))
  (type (;4;) (func (result (ref null $t) exnref)))
  (tag $e (;0;) (type 1) (param (ref $t)))
  (export "catch" (func 2))
  (export "catch_ref1" (func 3))
  (export "catch_ref2" (func 4))
  (export "catch_all_ref1" (func 5))
  (export "catch_all_ref2" (func 6))
  (elem (;0;) declare func $dummy)
  (func $dummy (;0;) (type $t))
  (func $throw (;1;) (type $t)
    ref.func $dummy
    throw $e
  )
  (func (;2;) (type 2) (result (ref null $t))
    block $l (result (ref null $t))
      try_table (catch $e $l) ;; label = @2
        call $throw
      end
      unreachable
    end
  )
  (func (;3;) (type 2) (result (ref null $t))
    block $l (type 3) (result (ref null $t) (ref exn))
      try_table (catch_ref $e $l) ;; label = @2
        call $throw
      end
      unreachable
    end
    drop
  )
  (func (;4;) (type 2) (result (ref null $t))
    block $l (type 4) (result (ref null $t) exnref)
      try_table (catch_ref $e $l) ;; label = @2
        call $throw
      end
      unreachable
    end
    drop
  )
  (func (;5;) (type $t)
    block $l (result (ref exn))
      try_table (catch_all_ref $l) ;; label = @2
        call $throw
      end
      unreachable
    end
    drop
  )
  (func (;6;) (type $t)
    block $l (result exnref)
      try_table (catch_all_ref $l) ;; label = @2
        call $throw
      end
      unreachable
    end
    drop
  )
)
