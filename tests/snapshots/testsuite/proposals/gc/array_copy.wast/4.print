(module
  (type $arr8 (;0;) (array i8))
  (type $arr8_mut (;1;) (array (mut i8)))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func))
  (type (;4;) (func (param i32 i32 i32)))
  (func (;0;) (type 2) (param $1 i32) (result i32)
    global.get $g_arr8_mut
    local.get $1
    array.get_u $arr8_mut
  )
  (func (;1;) (type 3)
    ref.null $arr8_mut
    i32.const 0
    global.get $g_arr8
    i32.const 0
    i32.const 0
    array.copy $arr8_mut $arr8
  )
  (func (;2;) (type 3)
    global.get $g_arr8_mut
    i32.const 0
    ref.null $arr8
    i32.const 0
    i32.const 0
    array.copy $arr8_mut $arr8
  )
  (func (;3;) (type 4) (param $1 i32) (param $2 i32) (param $3 i32)
    global.get $g_arr8_mut
    local.get $1
    global.get $g_arr8
    local.get $2
    local.get $3
    array.copy $arr8_mut $arr8
  )
  (func (;4;) (type 3)
    (local $1 (ref $arr8_mut))
    i32.const 0
    i32.const 12
    array.new_data $arr8_mut $d1
    local.set $1
    local.get $1
    i32.const 1
    local.get $1
    i32.const 0
    i32.const 11
    array.copy $arr8_mut $arr8_mut
    local.get $1
    global.set $g_arr8_mut
  )
  (func (;5;) (type 3)
    (local $1 (ref $arr8_mut))
    i32.const 0
    i32.const 12
    array.new_data $arr8_mut $d1
    local.set $1
    local.get $1
    i32.const 0
    local.get $1
    i32.const 1
    i32.const 11
    array.copy $arr8_mut $arr8_mut
    local.get $1
    global.set $g_arr8_mut
  )
  (global $g_arr8 (;0;) (ref $arr8) i32.const 10 i32.const 12 array.new $arr8)
  (global $g_arr8_mut (;1;) (mut (ref $arr8_mut)) i32.const 12 array.new_default $arr8_mut)
  (export "array_get_nth" (func 0))
  (export "array_copy-null-left" (func 1))
  (export "array_copy-null-right" (func 2))
  (export "array_copy" (func 3))
  (export "array_copy_overlap_test-1" (func 4))
  (export "array_copy_overlap_test-2" (func 5))
  (data $d1 (;0;) "abcdefghijkl")
)
