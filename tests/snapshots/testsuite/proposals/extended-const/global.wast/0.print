(module
  (type $check (;0;) (func (param i32 i32) (result i32)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func (result i64)))
  (type (;3;) (func (result externref)))
  (type (;4;) (func (param i32)))
  (type (;5;) (func (param i64)))
  (type (;6;) (func (param externref)))
  (type (;7;) (func (result f32)))
  (type (;8;) (func (result f64)))
  (type (;9;) (func (param f32)))
  (type (;10;) (func (param f64)))
  (type (;11;) (func))
  (type (;12;) (func (param i32) (result i32)))
  (import "spectest" "global_i32" (global (;0;) i32))
  (import "spectest" "global_i64" (global (;1;) i64))
  (func (;0;) (type 1) (result i32)
    global.get $a
  )
  (func (;1;) (type 2) (result i64)
    global.get $b
  )
  (func (;2;) (type 3) (result externref)
    global.get $r
  )
  (func (;3;) (type 3) (result externref)
    global.get $mr
  )
  (func (;4;) (type 1) (result i32)
    global.get $x
  )
  (func (;5;) (type 2) (result i64)
    global.get $y
  )
  (func (;6;) (type 1) (result i32)
    global.get $z1
  )
  (func (;7;) (type 2) (result i64)
    global.get $z2
  )
  (func (;8;) (type 1) (result i32)
    global.get $z3
  )
  (func (;9;) (type 2) (result i64)
    global.get $z4
  )
  (func (;10;) (type 1) (result i32)
    global.get $z5
  )
  (func (;11;) (type 2) (result i64)
    global.get $z6
  )
  (func (;12;) (type 4) (param i32)
    local.get 0
    global.set $x
  )
  (func (;13;) (type 5) (param i64)
    local.get 0
    global.set $y
  )
  (func (;14;) (type 6) (param externref)
    local.get 0
    global.set $mr
  )
  (func (;15;) (type 7) (result f32)
    global.get 3
  )
  (func (;16;) (type 8) (result f64)
    global.get 4
  )
  (func (;17;) (type 7) (result f32)
    global.get 7
  )
  (func (;18;) (type 8) (result f64)
    global.get 8
  )
  (func (;19;) (type 9) (param f32)
    local.get 0
    global.set 7
  )
  (func (;20;) (type 10) (param f64)
    local.get 0
    global.set 8
  )
  (func $dummy (;21;) (type 11))
  (func (;22;) (type 1) (result i32)
    global.get $x
    i32.const 2
    i32.const 3
    select
  )
  (func (;23;) (type 1) (result i32)
    i32.const 2
    global.get $x
    i32.const 3
    select
  )
  (func (;24;) (type 1) (result i32)
    i32.const 2
    i32.const 3
    global.get $x
    select
  )
  (func (;25;) (type 1) (result i32)
    loop (result i32) ;; label = @1
      global.get $x
      call $dummy
      call $dummy
    end
  )
  (func (;26;) (type 1) (result i32)
    loop (result i32) ;; label = @1
      call $dummy
      global.get $x
      call $dummy
    end
  )
  (func (;27;) (type 1) (result i32)
    loop (result i32) ;; label = @1
      call $dummy
      call $dummy
      global.get $x
    end
  )
  (func (;28;) (type 1) (result i32)
    global.get $x
    if (result i32) ;; label = @1
      call $dummy
      i32.const 2
    else
      call $dummy
      i32.const 3
    end
  )
  (func (;29;) (type 1) (result i32)
    i32.const 1
    if (result i32) ;; label = @1
      global.get $x
    else
      i32.const 2
    end
  )
  (func (;30;) (type 1) (result i32)
    i32.const 0
    if (result i32) ;; label = @1
      i32.const 2
    else
      global.get $x
    end
  )
  (func (;31;) (type 1) (result i32)
    block (result i32) ;; label = @1
      global.get $x
      i32.const 2
      br_if 0 (;@1;)
      i32.const 3
      return
    end
  )
  (func (;32;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      global.get $x
      br_if 0 (;@1;)
      i32.const 3
      return
    end
  )
  (func (;33;) (type 1) (result i32)
    block (result i32) ;; label = @1
      global.get $x
      i32.const 2
      br_table 0 (;@1;) 0 (;@1;)
    end
  )
  (func (;34;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      global.get $x
      br_table 0 (;@1;) 0 (;@1;)
    end
  )
  (func $func (;35;) (type $check) (param i32 i32) (result i32)
    local.get 0
  )
  (func (;36;) (type 1) (result i32)
    block (result i32) ;; label = @1
      global.get $x
      i32.const 2
      i32.const 0
      call_indirect (type $check)
    end
  )
  (func (;37;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      global.get $x
      i32.const 0
      call_indirect (type $check)
    end
  )
  (func (;38;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 2
      i32.const 0
      global.get $x
      call_indirect (type $check)
    end
  )
  (func (;39;) (type 11)
    global.get $x
    i32.const 1
    i32.store
  )
  (func (;40;) (type 11)
    i32.const 0
    global.get $x
    i32.store
  )
  (func (;41;) (type 1) (result i32)
    global.get $x
    i32.load
  )
  (func (;42;) (type 1) (result i32)
    global.get $x
    memory.grow
  )
  (func $f (;43;) (type 12) (param i32) (result i32)
    local.get 0
  )
  (func (;44;) (type 1) (result i32)
    global.get $x
    call $f
  )
  (func (;45;) (type 1) (result i32)
    global.get $x
    return
  )
  (func (;46;) (type 11)
    global.get $x
    drop
  )
  (func (;47;) (type 1) (result i32)
    block (result i32) ;; label = @1
      global.get $x
      br 0 (;@1;)
    end
  )
  (func (;48;) (type 12) (param i32) (result i32)
    global.get $x
    local.set 0
    local.get 0
  )
  (func (;49;) (type 12) (param i32) (result i32)
    global.get $x
    local.tee 0
  )
  (func (;50;) (type 1) (result i32)
    global.get $x
    global.set $x
    global.get $x
  )
  (func (;51;) (type 1) (result i32)
    global.get $x
    i32.eqz
  )
  (func (;52;) (type 1) (result i32)
    global.get $x
    global.get $x
    i32.mul
  )
  (func (;53;) (type 1) (result i32)
    global.get 0
    i32.const 1
    i32.gt_u
  )
  (table (;0;) 1 1 funcref)
  (memory (;0;) 1)
  (global $a (;2;) i32 i32.const -2)
  (global (;3;) f32 f32.const -0x1.8p+1 (;=-3;))
  (global (;4;) f64 f64.const -0x1p+2 (;=-4;))
  (global $b (;5;) i64 i64.const -5)
  (global $x (;6;) (mut i32) i32.const -12)
  (global (;7;) (mut f32) f32.const -0x1.ap+3 (;=-13;))
  (global (;8;) (mut f64) f64.const -0x1.cp+3 (;=-14;))
  (global $y (;9;) (mut i64) i64.const -15)
  (global $z1 (;10;) i32 global.get 0)
  (global $z2 (;11;) i64 global.get 1)
  (global $z3 (;12;) i32 i32.const 20 i32.const 2 i32.mul i32.const 2 i32.sub i32.const 4 i32.add)
  (global $z4 (;13;) i64 i64.const 20 i64.const 2 i64.mul i64.const 2 i64.sub i64.const 5 i64.add)
  (global $z5 (;14;) i32 global.get 0 i32.const 42 i32.add)
  (global $z6 (;15;) i64 global.get 1 i64.const 42 i64.add)
  (global $r (;16;) externref ref.null extern)
  (global $mr (;17;) (mut externref) ref.null extern)
  (global (;18;) funcref ref.null func)
  (export "get-a" (func 0))
  (export "get-b" (func 1))
  (export "get-r" (func 2))
  (export "get-mr" (func 3))
  (export "get-x" (func 4))
  (export "get-y" (func 5))
  (export "get-z1" (func 6))
  (export "get-z2" (func 7))
  (export "get-z3" (func 8))
  (export "get-z4" (func 9))
  (export "get-z5" (func 10))
  (export "get-z6" (func 11))
  (export "set-x" (func 12))
  (export "set-y" (func 13))
  (export "set-mr" (func 14))
  (export "get-3" (func 15))
  (export "get-4" (func 16))
  (export "get-7" (func 17))
  (export "get-8" (func 18))
  (export "set-7" (func 19))
  (export "set-8" (func 20))
  (export "as-select-first" (func 22))
  (export "as-select-mid" (func 23))
  (export "as-select-last" (func 24))
  (export "as-loop-first" (func 25))
  (export "as-loop-mid" (func 26))
  (export "as-loop-last" (func 27))
  (export "as-if-condition" (func 28))
  (export "as-if-then" (func 29))
  (export "as-if-else" (func 30))
  (export "as-br_if-first" (func 31))
  (export "as-br_if-last" (func 32))
  (export "as-br_table-first" (func 33))
  (export "as-br_table-last" (func 34))
  (export "as-call_indirect-first" (func 36))
  (export "as-call_indirect-mid" (func 37))
  (export "as-call_indirect-last" (func 38))
  (export "as-store-first" (func 39))
  (export "as-store-last" (func 40))
  (export "as-load-operand" (func 41))
  (export "as-memory.grow-value" (func 42))
  (export "as-call-value" (func 44))
  (export "as-return-value" (func 45))
  (export "as-drop-operand" (func 46))
  (export "as-br-value" (func 47))
  (export "as-local.set-value" (func 48))
  (export "as-local.tee-value" (func 49))
  (export "as-global.set-value" (func 50))
  (export "as-unary-operand" (func 51))
  (export "as-binary-operand" (func 52))
  (export "as-compare-operand" (func 53))
  (elem (;0;) (i32.const 0) func $func)
)