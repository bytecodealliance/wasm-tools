(module
  (type (;0;) (func))
  (type (;1;) (func (param i32) (result i32)))
  (func (;0;) (type 0)
    try ;; label = @1
      throw 0
    catch 0
      rethrow 0 (;@1;)
    end
  )
  (func (;1;) (type 1) (param i32) (result i32)
    try (result i32) ;; label = @1
      throw 0
    catch 0
      local.get 0
      i32.eqz
      if ;; label = @2
        rethrow 1 (;@1;)
      end
      i32.const 23
    end
  )
  (func (;2;) (type 0)
    try ;; label = @1
      throw 0
    catch_all
      rethrow 0 (;@1;)
    end
  )
  (func (;3;) (type 1) (param i32) (result i32)
    try (result i32) ;; label = @1
      throw 0
    catch_all
      local.get 0
      i32.eqz
      if ;; label = @2
        rethrow 1 (;@1;)
      end
      i32.const 23
    end
  )
  (func (;4;) (type 1) (param i32) (result i32)
    try (result i32) ;; label = @1
      throw 1
    catch 1
      try (result i32) ;; label = @2
        throw 0
      catch 0
        local.get 0
        i32.const 0
        i32.eq
        if ;; label = @3
          rethrow 1 (;@2;)
        end
        local.get 0
        i32.const 1
        i32.eq
        if ;; label = @3
          rethrow 2 (;@1;)
        end
        i32.const 23
      end
    end
  )
  (func (;5;) (type 1) (param i32) (result i32)
    try (result i32) ;; label = @1
      throw 0
    catch 0
      try (result i32) ;; label = @2
        local.get 0
        i32.eqz
        if ;; label = @3
          rethrow 2 (;@1;)
        end
        i32.const 42
      catch 0
        i32.const 23
      end
    end
  )
  (func (;6;) (type 0)
    try ;; label = @1
      throw 0
    catch 0
      i32.const 1
      rethrow 0 (;@1;)
    end
  )
  (tag (;0;) (type 0))
  (tag (;1;) (type 0))
  (export "catch-rethrow-0" (func 0))
  (export "catch-rethrow-1" (func 1))
  (export "catchall-rethrow-0" (func 2))
  (export "catchall-rethrow-1" (func 3))
  (export "rethrow-nested" (func 4))
  (export "rethrow-recatch" (func 5))
  (export "rethrow-stack-polymorphism" (func 6))
)