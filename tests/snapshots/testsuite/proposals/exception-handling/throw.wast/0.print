(module
  (type (;0;) (func))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param f32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param f64)))
  (type (;5;) (func (param i32 i32)))
  (type (;6;) (func (param i32) (result i32)))
  (type (;7;) (func (result i32 i32)))
  (func $throw-if (;0;) (type 6) (param i32) (result i32)
    local.get 0
    i32.const 0
    i32.ne
    if ;; label = @1
      throw $e0
    end
    i32.const 0
  )
  (func (;1;) (type 2) (param f32)
    local.get 0
    throw $e-f32
  )
  (func (;2;) (type 3) (param i64)
    local.get 0
    throw $e-i64
  )
  (func (;3;) (type 4) (param f64)
    local.get 0
    throw $e-f64
  )
  (func (;4;) (type 0)
    throw $e0
    throw $e-i32
  )
  (func (;5;) (type 0)
    block (result i32) ;; label = @1
      throw $e0
    end
    throw $e-i32
  )
  (func $throw-1-2 (;6;) (type 0)
    i32.const 1
    i32.const 2
    throw $e-i32-i32
  )
  (func (;7;) (type 0)
    block $h (type 7) (result i32 i32)
      try_table (catch $e-i32-i32 $h) ;; label = @2
        call $throw-1-2
      end
      return
    end
    i32.const 2
    i32.ne
    if ;; label = @1
      unreachable
    end
    i32.const 1
    i32.ne
    if ;; label = @1
      unreachable
    end
  )
  (tag $e0 (;0;) (type 0))
  (tag $e-i32 (;1;) (type 1) (param i32))
  (tag $e-f32 (;2;) (type 2) (param f32))
  (tag $e-i64 (;3;) (type 3) (param i64))
  (tag $e-f64 (;4;) (type 4) (param f64))
  (tag $e-i32-i32 (;5;) (type 5) (param i32 i32))
  (export "throw-if" (func $throw-if))
  (export "throw-param-f32" (func 1))
  (export "throw-param-i64" (func 2))
  (export "throw-param-f64" (func 3))
  (export "throw-polymorphic" (func 4))
  (export "throw-polymorphic-block" (func 5))
  (export "test-throw-1-2" (func 7))
)