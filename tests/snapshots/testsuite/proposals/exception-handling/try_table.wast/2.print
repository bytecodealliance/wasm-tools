(module
  (type (;0;) (func))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param f32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param f64)))
  (type (;5;) (func (param i32) (result i32)))
  (type (;6;) (func (param i32 i32) (result i32)))
  (type (;7;) (func (param f32) (result f32)))
  (type (;8;) (func (param i64) (result i64)))
  (type (;9;) (func (param f64) (result f64)))
  (type (;10;) (func (result i32 exnref)))
  (type (;11;) (func (result f32 exnref)))
  (type (;12;) (func (result i64 exnref)))
  (type (;13;) (func (result f64 exnref)))
  (type (;14;) (func (result i32)))
  (import "test" "e0" (tag $imported-e0 (;0;) (type 0)))
  (import "test" "throw" (func $imported-throw (;0;) (type 0)))
  (func $throw-if (;1;) (type 5) (param i32) (result i32)
    local.get 0
    i32.const 0
    i32.ne
    if ;; label = @1
      throw $e0
    end
    i32.const 0
  )
  (func (;2;) (type 5) (param i32) (result i32)
    block $h
      try_table (result i32) (catch $e0 $h) ;; label = @2
        local.get 0
        i32.eqz
        if ;; label = @3
          throw $e0
        else
        end
        i32.const 42
      end
      return
    end
    i32.const 23
  )
  (func (;3;) (type 0)
    block $h
      try_table (catch_all $h) ;; label = @2
        unreachable
      end
      return
    end
  )
  (func $div (;4;) (type 6) (param i32 i32) (result i32)
    local.get 0
    local.get 1
    i32.div_u
  )
  (func (;5;) (type 6) (param i32 i32) (result i32)
    block $h
      try_table (result i32) (catch_all $h) ;; label = @2
        local.get 0
        local.get 1
        call $div
      end
      return
    end
    i32.const 11
  )
  (func (;6;) (type 5) (param i32) (result i32)
    block $h1
      try_table (result i32) (catch $e1 $h1) ;; label = @2
        block $h0
          try_table (result i32) (catch $e0 $h0) ;; label = @4
            local.get 0
            i32.eqz
            if ;; label = @5
              throw $e0
            else
              local.get 0
              i32.const 1
              i32.eq
              if ;; label = @6
                throw $e1
              else
                throw $e2
              end
            end
            i32.const 2
          end
          br 1 (;@2;)
        end
        i32.const 3
      end
      return
    end
    i32.const 4
  )
  (func (;7;) (type 5) (param i32) (result i32)
    block $h0
      block $h1
        try_table (result i32) (catch $e0 $h0) (catch $e1 $h1) ;; label = @3
          local.get 0
          i32.eqz
          if ;; label = @4
            throw $e0
          else
            local.get 0
            i32.const 1
            i32.eq
            if ;; label = @5
              throw $e1
            else
              throw $e2
            end
          end
          i32.const 2
        end
        return
      end
      i32.const 4
      return
    end
    i32.const 3
  )
  (func (;8;) (type 5) (param i32) (result i32)
    block $h (result i32)
      try_table (result i32) (catch $e-i32 $h) ;; label = @2
        local.get 0
        throw $e-i32
        i32.const 2
      end
      return
    end
    return
  )
  (func (;9;) (type 7) (param f32) (result f32)
    block $h (result f32)
      try_table (result f32) (catch $e-f32 $h) ;; label = @2
        local.get 0
        throw $e-f32
        f32.const 0x0p+0 (;=0;)
      end
      return
    end
    return
  )
  (func (;10;) (type 8) (param i64) (result i64)
    block $h (result i64)
      try_table (result i64) (catch $e-i64 $h) ;; label = @2
        local.get 0
        throw $e-i64
        i64.const 2
      end
      return
    end
    return
  )
  (func (;11;) (type 9) (param f64) (result f64)
    block $h (result f64)
      try_table (result f64) (catch $e-f64 $h) ;; label = @2
        local.get 0
        throw $e-f64
        f64.const 0x0p+0 (;=0;)
      end
      return
    end
    return
  )
  (func (;12;) (type 5) (param i32) (result i32)
    block $h (type 10) (result i32 exnref)
      try_table (result i32) (catch_ref $e-i32 $h) ;; label = @2
        local.get 0
        throw $e-i32
        i32.const 2
      end
      return
    end
    drop
    return
  )
  (func (;13;) (type 7) (param f32) (result f32)
    block $h (type 11) (result f32 exnref)
      try_table (result f32) (catch_ref $e-f32 $h) ;; label = @2
        local.get 0
        throw $e-f32
        f32.const 0x0p+0 (;=0;)
      end
      return
    end
    drop
    return
  )
  (func (;14;) (type 8) (param i64) (result i64)
    block $h (type 12) (result i64 exnref)
      try_table (result i64) (catch_ref $e-i64 $h) ;; label = @2
        local.get 0
        throw $e-i64
        i64.const 2
      end
      return
    end
    drop
    return
  )
  (func (;15;) (type 9) (param f64) (result f64)
    block $h (type 13) (result f64 exnref)
      try_table (result f64) (catch_ref $e-f64 $h) ;; label = @2
        local.get 0
        throw $e-f64
        f64.const 0x0p+0 (;=0;)
      end
      return
    end
    drop
    return
  )
  (func $throw-param-i32 (;16;) (type 1) (param i32)
    local.get 0
    throw $e-i32
  )
  (func (;17;) (type 5) (param i32) (result i32)
    block $h (result i32)
      try_table (result i32) (catch $e-i32 $h) ;; label = @2
        i32.const 0
        local.get 0
        call $throw-param-i32
      end
      return
    end
  )
  (func (;18;) (type 14) (result i32)
    block $h
      try_table (result i32) (catch $imported-e0 $h) ;; label = @2
        i32.const 1
        call $imported-throw
      end
      return
    end
    i32.const 2
  )
  (func (;19;) (type 5) (param i32) (result i32)
    block $h
      try_table (result i32) (catch $e0 $h) ;; label = @2
        try_table (result i32) ;; label = @3
          local.get 0
          call $throw-if
        end
      end
      return
    end
    i32.const 1
  )
  (func $throw-void (;20;) (type 0)
    throw $e0
  )
  (func (;21;) (type 0)
    block $h
      try_table (catch $e0 $h) ;; label = @2
        return_call $throw-void
      end
    end
  )
  (func (;22;) (type 0)
    block $h
      try_table (catch $e0 $h) ;; label = @2
        i32.const 0
        return_call_indirect (type 0)
      end
    end
  )
  (table (;0;) 1 1 funcref)
  (tag $e0 (;1;) (type 0))
  (tag $e1 (;2;) (type 0))
  (tag $e2 (;3;) (type 0))
  (tag $e-i32 (;4;) (type 1) (param i32))
  (tag $e-f32 (;5;) (type 2) (param f32))
  (tag $e-i64 (;6;) (type 3) (param i64))
  (tag $e-f64 (;7;) (type 4) (param f64))
  (export "simple-throw-catch" (func 2))
  (export "unreachable-not-caught" (func 3))
  (export "trap-in-callee" (func 5))
  (export "catch-complex-1" (func 6))
  (export "catch-complex-2" (func 7))
  (export "throw-catch-param-i32" (func 8))
  (export "throw-catch-param-f32" (func 9))
  (export "throw-catch-param-i64" (func 10))
  (export "throw-catch-param-f64" (func 11))
  (export "throw-catch_ref-param-i32" (func 12))
  (export "throw-catch_ref-param-f32" (func 13))
  (export "throw-catch_ref-param-i64" (func 14))
  (export "throw-catch_ref-param-f64" (func 15))
  (export "catch-param-i32" (func 17))
  (export "catch-imported" (func 18))
  (export "catchless-try" (func 19))
  (export "return-call-in-try-catch" (func 21))
  (export "return-call-indirect-in-try-catch" (func 22))
  (elem (;0;) (i32.const 0) func $throw-void)
)