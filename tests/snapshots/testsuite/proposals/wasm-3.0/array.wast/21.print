(module
  (type $vec (;0;) (array i8))
  (type $mvec (;1;) (array (mut i8)))
  (type (;2;) (func (result (ref $vec))))
  (type (;3;) (func (param i32 (ref $vec)) (result i32)))
  (type (;4;) (func (param i32) (result i32)))
  (type (;5;) (func (param i32 (ref $mvec) i32) (result i32)))
  (type (;6;) (func (param i32 i32) (result i32)))
  (type (;7;) (func (param (ref array)) (result i32)))
  (type (;8;) (func (result i32)))
  (type (;9;) (func))
  (export "new" (func $new))
  (export "new-overflow" (func $new-overflow))
  (export "get_u" (func 3))
  (export "get_s" (func 5))
  (export "set_get" (func 7))
  (export "len" (func 9))
  (export "drop_segs" (func 10))
  (func $new (;0;) (type 2) (result (ref $vec))
    i32.const 1
    i32.const 3
    array.new_data $vec $d
  )
  (func $new-overflow (;1;) (type 2) (result (ref $vec))
    i32.const -2147483648
    i32.const -2147483648
    array.new_data $vec $d
  )
  (func $get_u (;2;) (type 3) (param $i i32) (param $v (ref $vec)) (result i32)
    local.get $v
    local.get $i
    array.get_u $vec
  )
  (func (;3;) (type 4) (param $i i32) (result i32)
    local.get $i
    call $new
    call $get_u
  )
  (func $get_s (;4;) (type 3) (param $i i32) (param $v (ref $vec)) (result i32)
    local.get $v
    local.get $i
    array.get_s $vec
  )
  (func (;5;) (type 4) (param $i i32) (result i32)
    local.get $i
    call $new
    call $get_s
  )
  (func $set_get (;6;) (type 5) (param $i i32) (param $v (ref $mvec)) (param $y i32) (result i32)
    local.get $v
    local.get $i
    local.get $y
    array.set $mvec
    local.get $v
    local.get $i
    array.get_u $mvec
  )
  (func (;7;) (type 6) (param $i i32) (param $y i32) (result i32)
    local.get $i
    i32.const 1
    i32.const 3
    array.new_data $mvec $d
    local.get $y
    call $set_get
  )
  (func $len (;8;) (type 7) (param $v (ref array)) (result i32)
    local.get $v
    array.len
  )
  (func (;9;) (type 8) (result i32)
    call $new
    call $len
  )
  (func (;10;) (type 9)
    data.drop $d
  )
  (data $d (;0;) "\00\01\02\ff\04")
)
