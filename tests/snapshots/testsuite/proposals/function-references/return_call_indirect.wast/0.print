(module
  (type $proc (;0;) (func))
  (type $out-i32 (;1;) (func (result i32)))
  (type $out-i64 (;2;) (func (result i64)))
  (type $out-f32 (;3;) (func (result f32)))
  (type $out-f64 (;4;) (func (result f64)))
  (type $over-i32 (;5;) (func (param i32) (result i32)))
  (type $over-i64 (;6;) (func (param i64) (result i64)))
  (type $over-f32 (;7;) (func (param f32) (result f32)))
  (type $over-f64 (;8;) (func (param f64) (result f64)))
  (type $f32-i32 (;9;) (func (param f32 i32) (result i32)))
  (type $i32-i64 (;10;) (func (param i32 i64) (result i64)))
  (type $f64-f32 (;11;) (func (param f64 f32) (result f32)))
  (type $i64-f64 (;12;) (func (param i64 f64) (result f64)))
  (type $over-i32-duplicate (;13;) (func (param i32) (result i32)))
  (type $over-i64-duplicate (;14;) (func (param i64) (result i64)))
  (type $over-f32-duplicate (;15;) (func (param f32) (result f32)))
  (type $over-f64-duplicate (;16;) (func (param f64) (result f64)))
  (type (;17;) (func (param i64)))
  (type (;18;) (func (param i64 f64 i32 i64)))
  (type (;19;) (func (param i64) (result i32)))
  (type (;20;) (func (param i64 f64 i32 i64) (result i32)))
  (type (;21;) (func (param i32) (result i64)))
  (type (;22;) (func (param i64 i64) (result i64)))
  (func $const-i32 (;0;) (type $out-i32) (result i32)
    i32.const 306
  )
  (func $const-i64 (;1;) (type $out-i64) (result i64)
    i64.const 356
  )
  (func $const-f32 (;2;) (type $out-f32) (result f32)
    f32.const 0x1.e64p+11 (;=3890;)
  )
  (func $const-f64 (;3;) (type $out-f64) (result f64)
    f64.const 0x1.ec8p+11 (;=3940;)
  )
  (func $id-i32 (;4;) (type $over-i32) (param i32) (result i32)
    local.get 0
  )
  (func $id-i64 (;5;) (type $over-i64) (param i64) (result i64)
    local.get 0
  )
  (func $id-f32 (;6;) (type $over-f32) (param f32) (result f32)
    local.get 0
  )
  (func $id-f64 (;7;) (type $over-f64) (param f64) (result f64)
    local.get 0
  )
  (func $i32-i64 (;8;) (type $i32-i64) (param i32 i64) (result i64)
    local.get 1
  )
  (func $i64-f64 (;9;) (type $i64-f64) (param i64 f64) (result f64)
    local.get 1
  )
  (func $f32-i32 (;10;) (type $f32-i32) (param f32 i32) (result i32)
    local.get 1
  )
  (func $f64-f32 (;11;) (type $f64-f32) (param f64 f32) (result f32)
    local.get 1
  )
  (func $over-i32-duplicate (;12;) (type $over-i32-duplicate) (param i32) (result i32)
    local.get 0
  )
  (func $over-i64-duplicate (;13;) (type $over-i64-duplicate) (param i64) (result i64)
    local.get 0
  )
  (func $over-f32-duplicate (;14;) (type $over-f32-duplicate) (param f32) (result f32)
    local.get 0
  )
  (func $over-f64-duplicate (;15;) (type $over-f64-duplicate) (param f64) (result f64)
    local.get 0
  )
  (func (;16;) (type $proc)
    i32.const 0
    return_call_indirect (type $proc)
    i64.const 0
    i32.const 0
    return_call_indirect (type 17)
    i64.const 0
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    i64.const 0
    i32.const 0
    return_call_indirect (type 18)
    i32.const 0
    return_call_indirect (type $proc)
  )
  (func (;17;) (type $out-i32) (result i32)
    i32.const 0
    return_call_indirect (type $out-i32)
    i32.const 0
    return_call_indirect (type $out-i32)
    i64.const 0
    i32.const 0
    return_call_indirect (type 19)
    i64.const 0
    f64.const 0x0p+0 (;=0;)
    i32.const 0
    i64.const 0
    i32.const 0
    return_call_indirect (type 20)
  )
  (func (;18;) (type $out-i64) (result i64)
    i64.const 0
    i32.const 0
    return_call_indirect (type $over-i64)
  )
  (func (;19;) (type $out-i32) (result i32)
    i32.const 0
    return_call_indirect (type $out-i32)
  )
  (func (;20;) (type $out-i64) (result i64)
    i32.const 1
    return_call_indirect (type $out-i64)
  )
  (func (;21;) (type $out-f32) (result f32)
    i32.const 2
    return_call_indirect (type $out-f32)
  )
  (func (;22;) (type $out-f64) (result f64)
    i32.const 3
    return_call_indirect (type $out-f64)
  )
  (func (;23;) (type $out-i64) (result i64)
    i64.const 100
    i32.const 5
    return_call_indirect (type $over-i64)
  )
  (func (;24;) (type $out-i32) (result i32)
    i32.const 32
    i32.const 4
    return_call_indirect (type $over-i32)
  )
  (func (;25;) (type $out-i64) (result i64)
    i64.const 64
    i32.const 5
    return_call_indirect (type $over-i64)
  )
  (func (;26;) (type $out-f32) (result f32)
    f32.const 0x1.51eb86p+0 (;=1.32;)
    i32.const 6
    return_call_indirect (type $over-f32)
  )
  (func (;27;) (type $out-f64) (result f64)
    f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;)
    i32.const 7
    return_call_indirect (type $over-f64)
  )
  (func (;28;) (type $out-i32) (result i32)
    f32.const 0x1.00ccccp+5 (;=32.1;)
    i32.const 32
    i32.const 8
    return_call_indirect (type $f32-i32)
  )
  (func (;29;) (type $out-i64) (result i64)
    i32.const 32
    i64.const 64
    i32.const 9
    return_call_indirect (type $i32-i64)
  )
  (func (;30;) (type $out-f32) (result f32)
    f64.const 0x1p+6 (;=64;)
    f32.const 0x1p+5 (;=32;)
    i32.const 10
    return_call_indirect (type $f64-f32)
  )
  (func (;31;) (type $out-f64) (result f64)
    i64.const 64
    f64.const 0x1.0066666666666p+6 (;=64.1;)
    i32.const 11
    return_call_indirect (type $i64-f64)
  )
  (func (;32;) (type $i32-i64) (param i32 i64) (result i64)
    local.get 1
    local.get 0
    return_call_indirect (type $over-i64)
  )
  (func (;33;) (type 21) (param i32) (result i64)
    i64.const 9
    local.get 0
    return_call_indirect (type $over-i64-duplicate)
  )
  (func $tab-f1 (;34;) (type $out-i32) (result i32)
    i32.const 307
  )
  (func $tab-f2 (;35;) (type $out-i32) (result i32)
    i32.const 308
  )
  (func (;36;) (type $over-i32) (param $i i32) (result i32)
    local.get $i
    i32.const 0
    i32.eq
    if ;; label = @1
      i32.const 0
      return_call_indirect (type $out-i32)
    end
    local.get $i
    i32.const 1
    i32.eq
    if ;; label = @1
      i32.const 0
      return_call_indirect $tab2 (type $out-i32)
    end
    local.get $i
    i32.const 2
    i32.eq
    if ;; label = @1
      i32.const 0
      return_call_indirect $tab3 (type $out-i32)
    end
    i32.const 0
  )
  (func $fac (;37;) (type $over-i64) (param i64) (result i64)
    local.get 0
    i64.const 1
    i32.const 13
    return_call_indirect (type 22)
  )
  (func $fac-acc (;38;) (type 22) (param i64 i64) (result i64)
    local.get 0
    i64.eqz
    if (result i64) ;; label = @1
      local.get 1
    else
      local.get 0
      i64.const 1
      i64.sub
      local.get 0
      local.get 1
      i64.mul
      i32.const 13
      return_call_indirect (type 22)
    end
  )
  (func $even (;39;) (type $over-i32) (param i32) (result i32)
    local.get 0
    i32.eqz
    if (result i32) ;; label = @1
      i32.const 44
    else
      local.get 0
      i32.const 1
      i32.sub
      i32.const 15
      return_call_indirect (type $over-i32)
    end
  )
  (func $odd (;40;) (type $over-i32) (param i32) (result i32)
    local.get 0
    i32.eqz
    if (result i32) ;; label = @1
      i32.const 99
    else
      local.get 0
      i32.const 1
      i32.sub
      i32.const 14
      return_call_indirect (type $over-i32)
    end
  )
  (table (;0;) 20 20 funcref)
  (table $tab2 (;1;) 1 1 funcref)
  (table $tab3 (;2;) 1 1 funcref)
  (export "type-i32" (func 19))
  (export "type-i64" (func 20))
  (export "type-f32" (func 21))
  (export "type-f64" (func 22))
  (export "type-index" (func 23))
  (export "type-first-i32" (func 24))
  (export "type-first-i64" (func 25))
  (export "type-first-f32" (func 26))
  (export "type-first-f64" (func 27))
  (export "type-second-i32" (func 28))
  (export "type-second-i64" (func 29))
  (export "type-second-f32" (func 30))
  (export "type-second-f64" (func 31))
  (export "dispatch" (func 32))
  (export "dispatch-structural" (func 33))
  (export "call-tab" (func 36))
  (export "fac" (func $fac))
  (export "even" (func $even))
  (export "odd" (func $odd))
  (elem (;0;) (i32.const 0) func $const-i32 $const-i64 $const-f32 $const-f64 $id-i32 $id-i64 $id-f32 $id-f64 $f32-i32 $i32-i64 $f64-f32 $i64-f64 $fac $fac-acc $even $odd $over-i32-duplicate $over-i64-duplicate $over-f32-duplicate $over-f64-duplicate)
  (elem (;1;) (table $tab2) (i32.const 0) func $tab-f1)
  (elem (;2;) (table $tab3) (i32.const 0) func $tab-f2)
)