(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (func (;0;) (type 0) (result i32)
    block $exit (result i32)
      i32.const 1
      br $exit
      i32.const 0
    end
  )
  (func (;1;) (type 0) (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $exit (result i32)
      loop $cont (result i32)
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if ;; label = @3
          local.get $i
          br $exit
        end
        br $cont
      end
    end
  )
  (func (;2;) (type 0) (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $exit (result i32)
      loop $cont (result i32)
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if ;; label = @3
          br $cont
        end
        local.get $i
        i32.const 8
        i32.eq
        if ;; label = @3
          local.get $i
          br $exit
        end
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        br $cont
      end
    end
  )
  (func (;3;) (type 0) (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $exit (result i32)
      loop $cont (result i32)
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        local.get $i
        i32.const 5
        i32.eq
        if ;; label = @3
          local.get $i
          br $exit
        end
        local.get $i
      end
    end
  )
  (func (;4;) (type 1) (param $max i32) (result i32)
    (local $i i32)
    i32.const 1
    local.set $i
    block $exit (result i32)
      loop $cont (result i32)
        local.get $i
        local.get $i
        i32.add
        local.set $i
        local.get $i
        local.get $max
        i32.gt_u
        if ;; label = @3
          local.get $i
          br $exit
        end
        br $cont
      end
    end
  )
  (func (;5;) (type 0) (result i32)
    loop $l (result i32)
      i32.const 1
    end
    i32.const 1
    i32.add
  )
  (func (;6;) (type 0) (result i32)
    loop (result i32) ;; label = @1
      i32.const 0
      br_if 0 (;@1;)
      i32.const 3
    end
  )
  (func (;7;) (type 0) (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block ;; label = @1
      i32.const 1
      if $l
        br $l
        i32.const 666
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $l
        br $l
        i32.const 666
        local.set $i
      else
        i32.const 888
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if $l
        br $l
        i32.const 666
        local.set $i
      else
        i32.const 888
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if $l
        i32.const 888
        local.set $i
      else
        br $l
        i32.const 666
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if $l
        i32.const 888
        local.set $i
      else
        br $l
        i32.const 666
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
    end
    local.get $i
  )
  (func (;8;) (type 0) (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block ;; label = @1
      i32.const 1
      if ;; label = @2
        br 0 (;@2;)
        i32.const 666
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if ;; label = @2
        br 0 (;@2;)
        i32.const 666
        local.set $i
      else
        i32.const 888
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 1
      if ;; label = @2
        br 0 (;@2;)
        i32.const 666
        local.set $i
      else
        i32.const 888
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if ;; label = @2
        i32.const 888
        local.set $i
      else
        br 0 (;@2;)
        i32.const 666
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      i32.const 0
      if ;; label = @2
        i32.const 888
        local.set $i
      else
        br 0 (;@2;)
        i32.const 666
        local.set $i
      end
      local.get $i
      i32.const 1
      i32.add
      local.set $i
    end
    local.get $i
  )
  (func (;9;) (type 1) (param i32) (result i32)
    block $ret (result i32)
      i32.const 10
      block $exit (result i32)
        block $0
          block $default
            block $3
              block $2
                block $1
                  local.get 0
                  br_table $0 $1 $2 $3 $default
                end
              end
              i32.const 2
              br $exit
            end
            i32.const 3
            br $ret
          end
        end
        i32.const 5
      end
      i32.mul
    end
  )
  (func (;10;) (type 1) (param i32) (result i32)
    block $default
      block $1
        block $0
          local.get 0
          br_table $0 $1
          br $default
        end
        i32.const 0
        return
      end
    end
    i32.const 2
  )
  (func (;11;) (type 0) (result i32)
    (local $i i32)
    i32.const 0
    local.set $i
    block $outer (result i32)
      block $inner
        i32.const 0
        br_if $inner
        local.get $i
        i32.const 1
        i32.or
        local.set $i
        i32.const 1
        br_if $inner
        local.get $i
        i32.const 2
        i32.or
        local.set $i
      end
      block (result i32) ;; label = @2
        local.get $i
        i32.const 4
        i32.or
        local.set $i
        local.get $i
      end
      i32.const 0
      br_if $outer
      drop
      local.get $i
      i32.const 8
      i32.or
      local.set $i
      block (result i32) ;; label = @2
        local.get $i
        i32.const 16
        i32.or
        local.set $i
        local.get $i
      end
      i32.const 1
      br_if $outer
      drop
      local.get $i
      i32.const 32
      i32.or
      local.set $i
      local.get $i
    end
  )
  (func (;12;) (type 0) (result i32)
    block $l0 (result i32)
      block $l1 (result i32)
        i32.const 1
        br $l1
      end
      i32.const 1
      br_if $l0
      drop
      i32.const 0
    end
  )
  (func (;13;) (type 0) (result i32)
    block $l0 (result i32)
      i32.const 1
      if ;; label = @2
        block $l1 (result i32)
          i32.const 1
          br $l1
        end
        i32.const 1
        br_if $l0
        drop
      end
      i32.const 0
    end
  )
  (func (;14;) (type 0) (result i32)
    (local $i1 i32)
    block $l0 (result i32)
      block (result i32) ;; label = @2
        i32.const 1
        local.set $i1
        local.get $i1
      end
      block (result i32) ;; label = @2
        i32.const 2
        local.set $i1
        local.get $i1
      end
      br_if $l0
      drop
      i32.const 0
    end
    i32.const 0
    i32.add
    drop
    local.get $i1
  )
  (func (;15;) (type 0) (result i32)
    block $l0 (result i32)
      i32.const 1
      if ;; label = @2
        block $l1 (result i32)
          i32.const 1
          br $l1
        end
        br $l0
      else
        block ;; label = @3
          block $l1 (result i32)
            i32.const 1
            br $l1
          end
          drop
        end
      end
      i32.const 1
    end
  )
  (func (;16;) (type 0) (result i32)
    block $l1 (result i32)
      i32.const 1
      br $l1
      i32.const 2
      i32.xor
    end
  )
  (func (;17;) (type 0) (result i32)
    block $l1 (result i32)
      block $l1 (result i32)
        i32.const 2
      end
      block $l1 (result i32)
        i32.const 3
        br $l1
      end
      i32.add
    end
  )
  (export "block" (func 0))
  (export "loop1" (func 1))
  (export "loop2" (func 2))
  (export "loop3" (func 3))
  (export "loop4" (func 4))
  (export "loop5" (func 5))
  (export "loop6" (func 6))
  (export "if" (func 7))
  (export "if2" (func 8))
  (export "switch" (func 9))
  (export "return" (func 10))
  (export "br_if0" (func 11))
  (export "br_if1" (func 12))
  (export "br_if2" (func 13))
  (export "br_if3" (func 14))
  (export "br" (func 15))
  (export "shadowing" (func 16))
  (export "redefinition" (func 17))
)