(module
  (type (;0;) (func))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param f32)))
  (type (;3;) (func (param i64)))
  (type (;4;) (func (param f64)))
  (type (;5;) (func (param i32) (result i32)))
  (type (;6;) (func (param i32 i32) (result i32)))
  (type (;7;) (func (param f32) (result f32)))
  (type (;8;) (func (param i64) (result i64)))
  (type (;9;) (func (param f64) (result f64)))
  (type (;10;) (func (result i32)))
  (import "test" "e0" (tag $imported-e0 (;0;) (type 0)))
  (import "test" "throw" (func $imported-throw (;0;) (type 0)))
  (func $throw-if (;1;) (type 5) (param i32) (result i32)
    local.get 0
    i32.const 0
    i32.ne
    if ;; label = @1
      throw $e0
    end
    i32.const 0
  )
  (func (;2;) (type 0)
    try ;; label = @1
    catch $e0
    end
  )
  (func (;3;) (type 5) (param i32) (result i32)
    try (result i32) ;; label = @1
      local.get 0
      i32.eqz
      if ;; label = @2
        throw $e0
      end
      i32.const 42
    catch $e0
      i32.const 23
    end
  )
  (func (;4;) (type 0)
    try ;; label = @1
      unreachable
    catch_all
    end
  )
  (func $div (;5;) (type 6) (param i32 i32) (result i32)
    local.get 0
    local.get 1
    i32.div_u
  )
  (func (;6;) (type 6) (param i32 i32) (result i32)
    try (result i32) ;; label = @1
      local.get 0
      local.get 1
      call $div
    catch_all
      i32.const 11
    end
  )
  (func (;7;) (type 5) (param i32) (result i32)
    try (result i32) ;; label = @1
      try (result i32) ;; label = @2
        local.get 0
        i32.eqz
        if ;; label = @3
          throw $e0
        else
          local.get 0
          i32.const 1
          i32.eq
          if ;; label = @4
            throw $e1
          else
            throw $e2
          end
        end
        i32.const 2
      catch $e0
        i32.const 3
      end
    catch $e1
      i32.const 4
    end
  )
  (func (;8;) (type 5) (param i32) (result i32)
    try (result i32) ;; label = @1
      local.get 0
      i32.eqz
      if ;; label = @2
        throw $e0
      else
        local.get 0
        i32.const 1
        i32.eq
        if ;; label = @3
          throw $e1
        else
          throw $e2
        end
      end
      i32.const 2
    catch $e0
      i32.const 3
    catch $e1
      i32.const 4
    end
  )
  (func (;9;) (type 5) (param i32) (result i32)
    try (result i32) ;; label = @1
      local.get 0
      throw $e-i32
      i32.const 2
    catch $e-i32
      return
    end
  )
  (func (;10;) (type 7) (param f32) (result f32)
    try (result f32) ;; label = @1
      local.get 0
      throw $e-f32
      f32.const 0x0p+0 (;=0;)
    catch $e-f32
      return
    end
  )
  (func (;11;) (type 8) (param i64) (result i64)
    try (result i64) ;; label = @1
      local.get 0
      throw $e-i64
      i64.const 2
    catch $e-i64
      return
    end
  )
  (func (;12;) (type 9) (param f64) (result f64)
    try (result f64) ;; label = @1
      local.get 0
      throw $e-f64
      f64.const 0x0p+0 (;=0;)
    catch $e-f64
      return
    end
  )
  (func $throw-param-i32 (;13;) (type 1) (param i32)
    local.get 0
    throw $e-i32
  )
  (func (;14;) (type 5) (param i32) (result i32)
    try (result i32) ;; label = @1
      i32.const 0
      local.get 0
      call $throw-param-i32
    catch $e-i32
    end
  )
  (func (;15;) (type 10) (result i32)
    try (result i32) ;; label = @1
      i32.const 1
      call $imported-throw
    catch $imported-e0
      i32.const 2
    end
  )
  (func (;16;) (type 5) (param i32) (result i32)
    try (result i32) ;; label = @1
      try (result i32) ;; label = @2
        local.get 0
        call $throw-if
      end
    catch $e0
      i32.const 1
    end
  )
  (func $throw-void (;17;) (type 0)
    throw $e0
  )
  (func (;18;) (type 0)
    try ;; label = @1
      return_call $throw-void
    catch $e0
    end
  )
  (func (;19;) (type 0)
    try ;; label = @1
      i32.const 0
      return_call_indirect (type 0)
    catch $e0
    end
  )
  (func (;20;) (type 0)
    try ;; label = @1
      br 0 (;@1;)
    catch $e0
    end
  )
  (func (;21;) (type 0)
    try ;; label = @1
      br 0 (;@1;)
    catch_all
    end
  )
  (table (;0;) 1 1 funcref)
  (tag $e0 (;1;) (type 0))
  (tag $e1 (;2;) (type 0))
  (tag $e2 (;3;) (type 0))
  (tag $e-i32 (;4;) (type 1) (param i32))
  (tag $e-f32 (;5;) (type 2) (param f32))
  (tag $e-i64 (;6;) (type 3) (param i64))
  (tag $e-f64 (;7;) (type 4) (param f64))
  (export "empty-catch" (func 2))
  (export "simple-throw-catch" (func 3))
  (export "unreachable-not-caught" (func 4))
  (export "trap-in-callee" (func 6))
  (export "catch-complex-1" (func 7))
  (export "catch-complex-2" (func 8))
  (export "throw-catch-param-i32" (func 9))
  (export "throw-catch-param-f32" (func 10))
  (export "throw-catch-param-i64" (func 11))
  (export "throw-catch-param-f64" (func 12))
  (export "catch-param-i32" (func 14))
  (export "catch-imported" (func 15))
  (export "catchless-try" (func 16))
  (export "return-call-in-try-catch" (func 18))
  (export "return-call-indirect-in-try-catch" (func 19))
  (export "break-try-catch" (func 20))
  (export "break-try-catch_all" (func 21))
  (elem (;0;) (i32.const 0) func $throw-void)
)
