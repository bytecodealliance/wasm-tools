(module
  (type $FUNCSIG$i (;0;) (func (result i32)))
  (type $FUNCSIG$vi (;1;) (func (param i32)))
  (type $FUNCSIG$vj (;2;) (func (param i64)))
  (type $FUNCSIG$vf (;3;) (func (param f32)))
  (type $FUNCSIG$vd (;4;) (func (param f64)))
  (type $FUNCSIG$j (;5;) (func (result i64)))
  (type (;6;) (func))
  (import "fuzzing-support" "log-i32" (func $log-i32 (;0;) (type $FUNCSIG$vi)))
  (import "fuzzing-support" "log-i64" (func $log-i64 (;1;) (type $FUNCSIG$vj)))
  (import "fuzzing-support" "log-f32" (func $log-f32 (;2;) (type $FUNCSIG$vf)))
  (import "fuzzing-support" "log-f64" (func $log-f64 (;3;) (type $FUNCSIG$vd)))
  (func $hashMemory (;4;) (type $FUNCSIG$i) (result i32)
    (local $0 i32)
    i32.const 5381
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=1
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=2
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=3
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=4
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=5
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=6
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=7
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=8
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=9
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=10
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=11
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=12
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=13
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=14
    i32.xor
    local.set $0
    local.get $0
    i32.const 5
    i32.shl
    local.get $0
    i32.add
    i32.const 0
    i32.load8_u offset=15
    i32.xor
    local.set $0
    local.get $0
  )
  (func $func_5 (;5;) (type $FUNCSIG$j) (result i64)
    (local $0 i32) (local $1 i64)
    block ;; label = @1
      global.get $hangLimit
      i32.eqz
      if ;; label = @2
        i64.const 4293531749
        return
      end
      global.get $hangLimit
      i32.const 1
      i32.sub
      global.set $hangLimit
    end
    block $label$0 (result i64) ;; label = @1
      nop
      block $label$1 (result i64) ;; label = @2
        i32.const -2147483647
        if (result i32) ;; label = @3
          local.get $0
        else
          block $label$4 (result i32) ;; label = @4
            block $label$5 (result i32) ;; label = @5
              loop $label$6 (result i32) ;; label = @6
                block ;; label = @7
                  global.get $hangLimit
                  i32.eqz
                  if ;; label = @8
                    i64.const -32766
                    return
                  end
                  global.get $hangLimit
                  i32.const 1
                  i32.sub
                  global.set $hangLimit
                end
                block (result i32) ;; label = @7
                  nop
                  i32.const 8388608
                  i32.eqz
                  br_if 1 (;@6;)
                  local.get $0
                end
              end
              i32.eqz
              if (result f32) ;; label = @6
                block $label$7 (result f32) ;; label = @7
                  f32.const -nan:0x7fffda (;=NaN;)
                end
              else
                f32.const 0x1p+32 (;=4294967300;)
              end
              call $log-f32
              i32.const -2147483648
            end
            if (result i32) ;; label = @5
              i32.const -1073741824
            else
              local.get $0
            end
            global.get $global$0
            i32.eqz
            br_if 0 (;@4;)
          end
        end
        local.tee $0
        local.set $0
        i64.const 255
      end
      local.tee $1
    end
  )
  (func $hangLimitInitializer (;6;) (type 6)
    i32.const 10
    global.set $hangLimit
  )
  (table $0 (;0;) 0 0 funcref)
  (memory $0 (;0;) 1 1)
  (global $global$0 (;0;) (mut i32) i32.const -65536)
  (global $global$1 (;1;) (mut f32) f32.const 0x1.fffffep+127 (;=340282350000000000000000000000000000000;))
  (global $global$2 (;2;) (mut f32) f32.const -0x1.744e6cp+117 (;=-241640630000000000000000000000000000;))
  (global $global$3 (;3;) (mut f64) f64.const -nan:0xfffffffffac1b (;=NaN;))
  (global $hangLimit (;4;) (mut i32) i32.const 10)
  (export "hashMemory" (func $hashMemory))
  (export "memory" (memory $0))
  (export "func_5" (func $func_5))
  (export "hangLimitInitializer" (func $hangLimitInitializer))
  (data (;0;) (i32.const 0) "\00\00\00\00")
)