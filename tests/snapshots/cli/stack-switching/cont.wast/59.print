(module $client
  (type $task-0 (;0;) (func (param i32) (result i32)))
  (type $ct-0 (;1;) (cont $task-0))
  (type $task (;2;) (func (result i32)))
  (type $ct (;3;) (cont $task))
  (type (;4;) (func (param (ref $ct) (ref $ct)) (result i32)))
  (type (;5;) (func (param i32)))
  (type (;6;) (func))
  (import "co2" "seesaw" (func $seesaw (;0;) (type 4)))
  (import "spectest" "print_i32" (func $print-i32 (;1;) (type 5)))
  (import "co2" "pause" (tag $pause (;0;) (type 6)))
  (export "main" (func 4))
  (elem (;0;) declare func $even $odd)
  (func $even (;2;) (type $task-0) (param $niter i32) (result i32)
    (local $next i32) (local $i i32)
    loop $print-next
      local.get $next
      call $print-i32
      suspend $pause
      local.get $next
      i32.const 2
      i32.add
      local.set $next
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      local.get $i
      local.get $niter
      i32.lt_u
      br_if $print-next
    end
    local.get $next
  )
  (func $odd (;3;) (type $task-0) (param $niter i32) (result i32)
    (local $next i32) (local $i i32)
    i32.const 1
    local.set $next
    loop $print-next
      local.get $next
      call $print-i32
      suspend $pause
      local.get $next
      i32.const 2
      i32.add
      local.set $next
      local.get $i
      i32.const 1
      i32.add
      local.set $i
      local.get $i
      local.get $niter
      i32.lt_u
      br_if $print-next
    end
    local.get $next
  )
  (func (;4;) (type $task) (result i32)
    i32.const 5
    ref.func $even
    cont.new $ct-0
    cont.bind $ct-0 $ct
    i32.const 5
    ref.func $odd
    cont.new $ct-0
    cont.bind $ct-0 $ct
    call $seesaw
  )
)
