(module $pipes
  (type $pfun (;0;) (func (result i32)))
  (type $cfun (;1;) (func (param i32) (result i32)))
  (type $producer (;2;) (cont $pfun))
  (type $consumer (;3;) (cont $cfun))
  (type (;4;) (func (param i32)))
  (type (;5;) (func (param (ref $producer) (ref $consumer))))
  (type (;6;) (func (result i32 (ref $producer))))
  (tag $send (;0;) (type 4) (param i32))
  (tag $receive (;1;) (type $pfun) (result i32))
  (export "send" (tag 0))
  (export "receive" (tag 1))
  (export "pipe" (func $piper))
  (func $piper (;0;) (type 5) (param $p (ref $producer)) (param $c (ref $consumer))
    (local $n i32) (local $consuming i32)
    i32.const -1
    local.set $n
    i32.const 1
    local.set $consuming
    loop $l
      local.get $consuming
      if ;; label = @2
        block $on-receive (result (ref $consumer))
          local.get $n
          local.get $c
          resume $consumer (on $receive $on-receive)
          return
        end
        local.set $c
        i32.const 0
        local.set $consuming
        br $l
      end
      block $on-send (type 6) (result i32 (ref $producer))
        local.get $p
        resume $producer (on $send $on-send)
        return
      end
      local.set $p
      local.set $n
      i32.const 1
      local.set $consuming
      br $l
    end
  )
)
