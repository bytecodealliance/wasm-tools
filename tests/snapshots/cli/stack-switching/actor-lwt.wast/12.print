(module $actor-as-lwt
  (type $func (;0;) (func))
  (type $cont (;1;) (cont $func))
  (type $i-func (;2;) (func (param i32)))
  (type $i-cont (;3;) (cont $i-func))
  (type $ic-func (;4;) (func (param i32 (ref $cont))))
  (type $ic-cont (;5;) (cont $ic-func))
  (type (;6;) (func (param (ref $cont))))
  (type (;7;) (func (param i32) (result i32)))
  (type (;8;) (func (result i32)))
  (type (;9;) (func (param i32 i32)))
  (type (;10;) (func (result (ref null $cont))))
  (type (;11;) (func (param (ref $cont)) (result i32)))
  (type (;12;) (func (result (ref $cont) (ref $i-cont))))
  (type (;13;) (func (result i32 i32 (ref $cont))))
  (import "spectest" "print_i32" (func $log (;0;) (type $i-func)))
  (import "lwt" "yield" (tag $yield (;0;) (type $func)))
  (import "lwt" "fork" (tag $fork (;1;) (type 6) (param (ref $cont))))
  (import "mailboxes" "init" (func $init (;1;) (type $func)))
  (import "mailboxes" "empty-mb" (func $empty-mb (;2;) (type 7)))
  (import "mailboxes" "new-mb" (func $new-mb (;3;) (type 8)))
  (import "mailboxes" "send-to-mb" (func $send-to-mb (;4;) (type 9)))
  (import "mailboxes" "recv-from-mb" (func $recv-from-mb (;5;) (type 7)))
  (import "queue" "queue-empty" (func $queue-empty (;6;) (type 8)))
  (import "queue" "dequeue" (func $dequeue (;7;) (type 10)))
  (import "queue" "enqueue" (func $enqueue (;8;) (type 6)))
  (import "actor" "self" (tag $self (;2;) (type 8) (result i32)))
  (import "actor" "spawn" (tag $spawn (;3;) (type 11) (param (ref $cont)) (result i32)))
  (import "actor" "send" (tag $send (;4;) (type 9) (param i32 i32)))
  (import "actor" "recv" (tag $recv (;5;) (type 8) (result i32)))
  (export "act" (func $act))
  (elem (;0;) declare func $actk)
  (func $actk (;9;) (type $ic-func) (param $mine i32) (param $nextk (ref $cont))
    (local $ik (ref $i-cont)) (local $k (ref $cont)) (local $you (ref $cont)) (local $yours i32)
    loop $l
      block $on_self (result (ref $i-cont))
        block $on_spawn (type 12) (result (ref $cont) (ref $i-cont))
          block $on_send (type 13) (result i32 i32 (ref $cont))
            block $on_recv (result (ref $i-cont))
              local.get $nextk
              resume $cont (on $self $on_self) (on $spawn $on_spawn) (on $send $on_send) (on $recv $on_recv)
              return
            end
            local.set $ik
            loop $blocked
              local.get $mine
              call $empty-mb
              if ;; label = @6
                suspend $yield
                br $blocked
              end
            end
            local.get $mine
            call $recv-from-mb
            local.get $ik
            cont.bind $i-cont $cont
            local.set $nextk
            br $l
          end
          local.set $k
          call $send-to-mb
          local.get $k
          local.set $nextk
          br $l
        end
        local.set $ik
        local.set $you
        call $new-mb
        local.set $yours
        local.get $yours
        local.get $you
        ref.func $actk
        cont.new $ic-cont
        cont.bind $ic-cont $cont
        suspend $fork
        local.get $yours
        local.get $ik
        cont.bind $i-cont $cont
        local.set $nextk
        br $l
      end
      local.set $ik
      local.get $mine
      local.get $ik
      cont.bind $i-cont $cont
      local.set $nextk
      br $l
    end
  )
  (func $act (;10;) (type 6) (param $k (ref $cont))
    call $init
    call $new-mb
    local.get $k
    call $actk
  )
)
