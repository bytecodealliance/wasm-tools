(module $mailboxes
  (type (;0;) (func (param i32)))
  (type (;1;) (func))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func (result i32)))
  (type (;4;) (func (param i32 i32)))
  (import "spectest" "print_i32" (func $log (;0;) (type 0)))
  (memory (;0;) 1)
  (tag $too-many-mailboxes (;0;) (type 1))
  (tag $too-many-messages (;1;) (type 1))
  (global $msize (;0;) (mut i32) i32.const 0)
  (global $mmax (;1;) i32 i32.const 1024)
  (export "init" (func $init))
  (export "empty-mb" (func $empty-mb))
  (export "new-mb" (func $new-mb))
  (export "send-to-mb" (func $send-to-mb))
  (export "recv-from-mb" (func $recv-from-mb))
  (func $init (;1;) (type 1)
    i32.const 0
    global.set $msize
    i32.const 0
    i32.const -1
    global.get $mmax
    i32.const 4
    i32.mul
    memory.fill
  )
  (func $empty-mb (;2;) (type 2) (param $mb i32) (result i32)
    (local $offset i32)
    local.get $mb
    i32.const 4
    i32.mul
    local.set $offset
    local.get $offset
    i32.load
    i32.const -1
    i32.eq
  )
  (func $new-mb (;3;) (type 3) (result i32)
    (local $mb i32)
    global.get $msize
    global.get $mmax
    i32.ge_u
    if ;; label = @1
      throw $too-many-mailboxes
    end
    global.get $msize
    local.set $mb
    global.get $msize
    i32.const 1
    i32.add
    global.set $msize
    local.get $mb
    return
  )
  (func $send-to-mb (;4;) (type 4) (param $v i32) (param $mb i32)
    (local $offset i32)
    local.get $mb
    i32.const 4
    i32.mul
    local.set $offset
    local.get $mb
    call $empty-mb
    if ;; label = @1
      local.get $offset
      local.get $v
      i32.store
    else
      throw $too-many-messages
    end
  )
  (func $recv-from-mb (;5;) (type 2) (param $mb i32) (result i32)
    (local $v i32) (local $offset i32)
    local.get $mb
    i32.const 4
    i32.mul
    local.set $offset
    local.get $offset
    i32.load
    local.set $v
    local.get $offset
    i32.const -1
    i32.store
    local.get $v
  )
)
