(module
  (type (;0;) (func (result f32)))
  (type (;1;) (func (result i32)))
  (type (;2;) (func))
  (func $fold-block (;0;) (type 0) (result f32)
    f32.const 0x1p+1 (;=2;)
    block ;; label = @1
      f32.const 0x1.8p+1 (;=3;)
      br 0 (;@1;)
    end
    f32.const 0x1p+0 (;=1;)
    f32.add
  )
  (func $fold-block-br-value (;1;) (type 1) (result i32)
    block (result i32) ;; label = @1
      i32.const 1
      br 0 (;@1;)
    end
  )
  (func $fold-loop (;2;) (type 2)
    loop (result i64) ;; label = @1
      br 0 (;@1;)
      i64.const 1
    end
    drop
  )
  (func $fold-loop-br (;3;) (type 1) (result i32)
    loop (result i32) ;; label = @1
      i32.const 1
      br 0 (;@1;)
    end
  )
  (func $fold-if (;4;) (type 2)
    i32.const 1
    if ;; label = @1
      nop
      nop
    end
  )
  (func $fold-if-else (;5;) (type 2)
    i32.const 1
    if (result i32) ;; label = @1
      i32.const 2
    else
      i32.const 3
    end
    drop
  )
  (func $fold-if-else-br (;6;) (type 2)
    i32.const 1
    if (result i32) ;; label = @1
      i32.const 2
      br 0 (;@1;)
    else
      i32.const 3
    end
    drop
  )
)
