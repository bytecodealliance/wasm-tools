/// RUN[imports]: component wit % --merge-world-imports-based-on-semver imports
/// RUN[exports]: component wit % --merge-world-imports-based-on-semver exports
/// RUN[imports-deps]: component wit % --merge-world-imports-based-on-semver imports-deps
/// RUN[imports-deps2]: component wit % --merge-world-imports-based-on-semver imports-deps2
/// FAIL[invalid-semver]: component wit % --merge-world-imports-based-on-semver invalid-semver
/// RUN[valid-semver]: component wit % --merge-world-imports-based-on-semver valid-semver
/// RUN[fix-transitive]: component wit % --merge-world-imports-based-on-semver fix-transitive
package foo:bar;

world imports {
  import a:b/foo@0.1.0;
  import a:b/foo@0.1.1;
}
world exports {
  export a:b/foo@0.1.0;
  export a:b/foo@0.1.1;
}
world imports-deps {
  import a:b/foo@0.1.0;
  import a:b/depend-on-foo@0.1.0;
  import a:b/foo@0.1.1;
  import a:b/depend-on-foo@0.1.1;
}
world imports-deps2 {
  import a:b/foo@0.1.1;
  import a:b/depend-on-foo@0.1.1;
  import a:b/foo@0.1.0;
  import a:b/depend-on-foo@0.1.0;
}
world invalid-semver {
  import a:b/invalid-semver@0.1.0;
  import a:b/invalid-semver@0.1.1;
}
world valid-semver {
  import a:b/valid-semver@0.1.0;
  import a:b/valid-semver@0.1.1;
}
world fix-transitive {
  import a:b/foo@0.1.0;
  import a:b/use-foo1@0.1.0;
  import a:b/foo@0.1.1;
  import a:b/use-foo2@0.1.1;
  use a:b/foo@0.1.0.{t as t1};
  use a:b/use-foo1@0.1.0.{t as t2};
  use a:b/foo@0.1.1.{t as t3};
  use a:b/use-foo2@0.1.1.{t as t4};
}
package a:b@0.1.0 {
  interface foo {
    type t = u32;

    x: func();
  }
  interface depend-on-foo {
    use foo.{t};

    x: func() -> t;
  }
  interface invalid-semver {
    x: func();
  }
  interface valid-semver {
    x: func();
  }
  interface use-foo1 {
    use foo.{t};

    x: func() -> t;
  }
}


package a:b@0.1.1 {
  interface foo {
    type t = u32;

    x: func();
  }
  interface depend-on-foo {
    use foo.{t};

    x: func() -> t;
  }
  interface invalid-semver {
    y: func();
  }
  interface valid-semver {
    x: func();

    y: func();
  }
  interface use-foo2 {
    use foo.{t};

    x: func() -> t;
  }
}
