(component
  (type (;0;)
    (component
      (type (;0;)
        (instance
          (type (;0;) (record (field "foo" string)))
          (export (;1;) "usable-record" (type (eq 0)))
        )
      )
      (import "foo:nestee/usable" (instance (;0;) (type 0)))
      (alias export 0 "usable-record" (type (;1;)))
      (type (;2;)
        (instance
          (alias outer 1 1 (type (;0;)))
          (export (;1;) "usable-record" (type (eq 0)))
          (type (;2;) (record (field "foo" string)))
          (export (;3;) "my-record" (type (eq 2)))
          (type (;4;) (func (result string)))
          (export (;0;) "hello" (func (type 4)))
          (type (;5;)
            (instance
              (type (;0;) (record (field "foo" string)))
              (export (;1;) "nestrecord" (type (eq 0)))
              (type (;2;)
                (instance
                  (type (;0;) (record (field "foo" string)))
                  (export (;1;) "nestrecord" (type (eq 0)))
                )
              )
              (export (;0;) "foo:nestnest/deep" (instance (type 2)))
            )
          )
          (export (;0;) "foo:nestee/things" (instance (type 5)))
          (type (;6;)
            (instance
              (export (;0;) "foo" (type (sub resource)))
            )
          )
          (export (;1;) "foo:nestee/more" (instance (type 6)))
        )
      )
      (export (;1;) "foo:thing/something" (instance (type 2)))
    )
  )
  (export (;1;) "something" (type 0))
  (type (;2;)
    (component
      (type (;0;)
        (instance
          (type (;0;) (list u8))
          (export (;1;) "random" (type (eq 0)))
        )
      )
      (export (;0;) "foo:thing/flat" (instance (type 0)))
    )
  )
  (export (;3;) "flat" (type 2))
  (type (;4;)
    (component
      (type (;0;)
        (component
          (type (;0;)
            (instance
              (type (;0;) (record (field "foo" string)))
              (export (;1;) "usable-record" (type (eq 0)))
            )
          )
          (import "foo:nestee/usable" (instance (;0;) (type 0)))
          (alias export 0 "usable-record" (type (;1;)))
          (type (;2;)
            (instance
              (alias outer 1 1 (type (;0;)))
              (export (;1;) "usable-record" (type (eq 0)))
              (type (;2;) (record (field "foo" string)))
              (export (;3;) "my-record" (type (eq 2)))
              (type (;4;) (func (result string)))
              (export (;0;) "hello" (func (type 4)))
            )
          )
          (import "foo:thing/something" (instance (;1;) (type 2)))
          (type (;3;)
            (instance
              (type (;0;) (list u8))
              (export (;1;) "random" (type (eq 0)))
            )
          )
          (import "foo:thing/flat" (instance (;2;) (type 3)))
          (type (;4;)
            (instance
              (alias outer 1 1 (type (;0;)))
              (export (;1;) "usable-record" (type (eq 0)))
              (type (;2;) (record (field "foo" string)))
              (export (;3;) "my-record" (type (eq 2)))
              (type (;4;) (func (result string)))
              (export (;0;) "hello" (func (type 4)))
            )
          )
          (export (;3;) "foo:thing/something" (instance (type 4)))
          (type (;5;)
            (instance
              (type (;0;) (list u8))
              (export (;1;) "random" (type (eq 0)))
            )
          )
          (export (;4;) "foo:thing/flat" (instance (type 5)))
        )
      )
      (export (;0;) "foo:thing/my-world" (component (type 0)))
    )
  )
  (export (;5;) "my-world" (type 4))
  (@custom "package-docs" "\01{\22interfaces\22:{\22something\22:{\22types\22:{\22my-record\22:{\22stability\22:{\22stable\22:{\22since\22:\221.0.0\22}}}},\22nested\22:{\22foo:nestee/things\22:{\22docs\22:{\22contents\22:\22nesting can be documented\22},\22stability\22:\22unknown\22},\22foo:nestee/more\22:{\22docs\22:{\22contents\22:null},\22stability\22:{\22stable\22:{\22since\22:\221.0.0\22}}}}}}}")
  (@producers
    (processed-by "wit-component" "$CARGO_PKG_VERSION")
  )
)
