(component
  (type (;0;)
    (component
      (type (;0;)
        (instance
          (type (;0;) u32)
          (export (;1;) "t" (type (eq 0)))
          (type (;2;) (record (field "f1" u8) (field "f2" u8)))
          (export (;3;) "r" (type (eq 2)))
          (type (;4;) (flags "f1" "f2"))
          (export (;5;) "fl" (type (eq 4)))
          (type (;6;) (variant (case "c1" u8) (case "c2")))
          (export (;7;) "v" (type (eq 6)))
          (type (;8;) (enum "c1" "c2"))
          (export (;9;) "e" (type (eq 8)))
          (export (;10;) "res" (type (sub resource)))
          (type (;11;) (own 10))
          (type (;12;) (func (result 11)))
          (export (;0;) "[constructor]res" (func (type 12)))
          (type (;13;) (borrow 10))
          (type (;14;) (func (param "self" 13)))
          (export (;1;) "[method]res.m" (func (type 14)))
          (type (;15;) (func))
          (export (;2;) "[static]res.s" (func (type 15)))
          (export (;3;) "f" (func (type 15)))
        )
      )
      (export (;0;) "foo:foo/coverage-iface" (instance (type 0)))
    )
  )
  (export (;1;) "coverage-iface" (type 0))
  (type (;2;)
    (component
      (type (;0;)
        (instance
          (type (;0;) (func))
          (export (;0;) "multiple-lines-split" (func (type 0)))
          (export (;1;) "mixed-forms" (func (type 0)))
        )
      )
      (export (;0;) "foo:foo/other-comment-forms" (instance (type 0)))
    )
  )
  (export (;3;) "other-comment-forms" (type 2))
  (type (;4;)
    (component
      (type (;0;)
        (component
          (type (;0;) u32)
          (import "t" (type (;1;) (eq 0)))
          (type (;2;) (func))
          (import "imp" (func (;0;) (type 2)))
          (export (;1;) "exp" (func (type 2)))
          (type (;3;)
            (instance
              (type (;0;) u32)
              (export (;1;) "t" (type (eq 0)))
              (type (;2;) (func))
              (export (;0;) "f" (func (type 2)))
            )
          )
          (export (;0;) "i" (instance (type 3)))
        )
      )
      (export (;0;) "foo:foo/coverage-world" (component (type 0)))
    )
  )
  (export (;5;) "coverage-world" (type 4))
  (@custom "package-docs" "\00{\22docs\22:\22package docs;\22,\22worlds\22:{\22coverage-world\22:{\22docs\22:\22world docs\22,\22interfaces\22:{\22i\22:{\22docs\22:\22world inline interface docs\22,\22funcs\22:{\22f\22:\22inline interface func docs\22},\22types\22:{\22t\22:{\22docs\22:\22inline interface typedef docs\22}}}},\22types\22:{\22t\22:{\22docs\22:\22world typedef docs\22}},\22funcs\22:{\22imp\22:\22world func import docs\22,\22exp\22:\22world func export docs\22}}},\22interfaces\22:{\22coverage-iface\22:{\22docs\22:\22interface docs\22,\22funcs\22:{\22[constructor]res\22:\22constructor docs\22,\22[method]res.m\22:\22method docs\22,\22[static]res.s\22:\22static func docs\22,\22f\22:\22interface func docs\22},\22types\22:{\22t\22:{\22docs\22:\22basic typedef docs\22},\22r\22:{\22docs\22:\22record typedef docs\22,\22items\22:{\22f1\22:\22record field docs\22}},\22fl\22:{\22items\22:{\22f1\22:\22flag docs\22}},\22v\22:{\22items\22:{\22c1\22:\22variant case docs\22}},\22e\22:{\22items\22:{\22c1\22:\22enum case docs\22}}}},\22other-comment-forms\22:{\22docs\22:\22other comment forms\5cn    multi-line block\22,\22funcs\22:{\22multiple-lines-split\22:\22one doc line\5cnnon-doc in the middle\5cnanother doc line\22,\22mixed-forms\22:\22mixed forms; line doc\5cnplus block doc\5cn      multi-line\22}}}}")
  (@producers
    (processed-by "wit-component" "$CARGO_PKG_VERSION")
  )
)
