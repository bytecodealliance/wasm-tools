[package]
name = "wast"
version = "220.0.0"
authors = ["Alex Crichton <alex@alexcrichton.com>"]
edition.workspace = true
license.workspace = true
readme = "README.md"
repository = "https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wast"
homepage = "https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wast"
documentation = "https://docs.rs/wast"
description = """
Customizable Rust parsers for the WebAssembly Text formats WAT and WAST
"""
rust-version.workspace = true

[package.metadata.docs.rs]
all-features = true

[lints]
workspace = true

[dependencies]
leb128 = { workspace = true }
unicode-width = "0.2.0"
memchr = "2.4.1"
wasm-encoder = { workspace = true }
bumpalo = "3.14.0"
gimli = { workspace = true, optional = true }

[dev-dependencies]
anyhow = { workspace = true }
libtest-mimic = { workspace = true }
wasmparser = { path = "../wasmparser" }
wat = { path = "../wat" }
rand = { workspace = true }

[features]
default = ['wasm-module', 'component-model']

# Includes default parsing support for `*.wat` and `*.wast` files (wasm
# modules). This isn't always needed though if you're parsing just an
# s-expression based format. If you'd like to slim down this dependency to just
# the lexer, parser framework, and token support, this feature can be disabled.
#
# This feature is turned on by default.
wasm-module = []

# Off-by-default feature to support emitting DWARF debugging information in
# parsed binaries pointing back to source locations in the original `*.wat`
# source.
dwarf = ["dep:gimli"]

# On-by-default this builds in support for parsing the text format of
# components.
component-model = ['wasm-module', 'wasm-encoder/component-model']

[[test]]
name = "parse-fail"
harness = false
