name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, beta, nightly, macos, windows]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly-2021-12-10
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Rust (rustup)
      run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      shell: bash
    - name: Install Ninja (Linux)
      run: sudo apt install ninja-build
      if: matrix.os == 'ubuntu-latest'
    - name: Install Ninja (macOS)
      run: brew install ninja
      if: matrix.os == 'macos-latest'
    - name: Install Ninja (Windows)
      run: choco install ninja
      if: matrix.os == 'windows-latest'

    - name: Build wabt
      run: |
        set -e
        cd tests/wabt
        cmake . -G Ninja -DBUILD_TESTS=OFF
        ninja wast2json wat2wasm wasm2wat
      shell: bash
    - name: Add wabt to path (unix)
      run: echo `pwd`/tests/wabt >> $GITHUB_PATH
      if: matrix.os != 'windows-latest'
    - name: Add wabt to path (windows)
      run: echo D:/a/wasm-tools/wasm-tools/tests/wabt >> $GITHUB_PATH
      if: matrix.os == 'windows-latest'
      shell: bash

    - run: cargo test --all
    - run: cargo test --all
      env:
        RUSTFLAGS: --cfg=wast_check_exhaustive
    - run: cargo test --manifest-path crates/wasmparser/Cargo.toml --features deterministic
    - run: cargo build --manifest-path crates/wast/Cargo.toml --no-default-features
    - run: cargo build --manifest-path crates/wast/Cargo.toml --no-default-features --features wasm-module

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - run: cargo fmt -- --check

  compare-with-main:
    name: wasmparser bench
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - run: git fetch --recurse-submodules=no origin main && git branch main origin/main
      if: github.ref != 'refs/heads/main'
    - run: (cd crates/wasmparser && ./compare-with-main.sh)

  fuzz:
    name: Fuzz
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Rust
      run: rustup update nightly && rustup default nightly
    - run: cargo install cargo-fuzz
    - run: cargo fuzz build

  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: cargo check --benches -p wasm-smith
      - run: cargo check --no-default-features
      - run: cargo check --no-default-features --features print
      - run: cargo check --no-default-features --features parse
      - run: cargo check --no-default-features --features validate
      - run: cargo check --no-default-features --features smith
      - run: cargo check --no-default-features --features shrink
      - run: cargo check --no-default-features --features mutate
      - run: cargo check --no-default-features --features dump
      - run: cargo check --no-default-features --features objdump

  # Make sure running tests without wabt is supported
  test_no_wabt:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Rust (rustup)
      run: rustup update stable --no-self-update && rustup default stable
      shell: bash
    - run: cargo test --all
      env:
        SKIP_WABT: 1
